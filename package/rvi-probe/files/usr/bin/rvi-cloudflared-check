#!/bin/sh
set -eu
CF_BIN=/usr/bin/cloudflared
TOKEN_FILE=/etc/cloudflared/token
INIT=/etc/init.d/cloudflared
WORKER_URL="https://status-hunter.traveldata.workers.dev/provision"

install_cloudflared() {
  if command -v opkg >/dev/null 2>&1; then
    if ! opkg update >/dev/null 2>&1; then
      rc=$?
      echo "opkg update failed with exit code $rc" >&2
      echo "check repository configuration or network connectivity" >&2
      return $rc
    fi
    if ! opkg install cloudflared >/dev/null 2>&1; then
      rc=$?
      echo "opkg install cloudflared failed with exit code $rc" >&2
      echo "verify that the cloudflared package is available" >&2
      return $rc
    fi
  else
    echo "opkg command not found" >&2
    return 1
  fi
}

fetch_token() {
  IFACE="$(uci get network.lan.ifname 2>/dev/null || echo eth0)"
  MAC="$(ip link show "$IFACE" 2>/dev/null | awk '/link\/ether/{print $2}' | tr -d ':' | tr 'A-Z' 'a-z')"
  case "$MAC" in ''|*[!0-9a-f]*) echo "failed to determine MAC" >&2; return 1;; esac

  RES=""
  if command -v uclient-fetch >/dev/null 2>&1; then
    RES=$(uclient-fetch -qO- -H 'Content-Type: application/json' -X POST -d "{\"mac\":\"$MAC\"}" "$WORKER_URL" 2>&1)
    rc=$?
    if [ $rc -ne 0 ]; then
      echo "uclient-fetch failed with exit code $rc: $RES" >&2
      RES=""
    fi
  fi
  if [ -z "$RES" ]; then
    RES=$(curl -fsS -H 'Content-Type: application/json' -d "{\"mac\":\"$MAC\"}" "$WORKER_URL" 2>&1)
    rc=$?
    if [ $rc -ne 0 ]; then
      echo "curl failed with exit code $rc: $RES" >&2
      return $rc
    fi
  fi
  TOKEN=$(printf '%s' "$RES" | sed -n 's/.*"token"[[:space:]]*:[[:space:]]*"\([^"]\+\)".*/\1/p' | head -n1)
  [ -z "$TOKEN" ] && TOKEN=$(echo "$RES" | jq -r '.token // empty' 2>/dev/null || true)
  if [ -n "$TOKEN" ] && [ "$TOKEN" != "TOKEN_PLACEHOLDER" ] && [ ${#TOKEN} -ge 32 ]; then
    mkdir -p "$(dirname "$TOKEN_FILE")" 2>/dev/null; umask 077
    printf '%s' "$TOKEN" > "$TOKEN_FILE"
    chmod 0600 "$TOKEN_FILE" 2>/dev/null || true
    echo "token retrieved"
  else
    echo "failed to fetch valid token" >&2
    return 1
  fi
}

check_bin() {
  if [ -x "$CF_BIN" ]; then
    echo "cloudflared binary present: $CF_BIN"
  else
    echo "cloudflared binary missing: $CF_BIN"
    install_cloudflared || return 1
    if [ -x "$CF_BIN" ]; then
      echo "cloudflared binary installed"
    else
      echo "cloudflared install failed" >&2
      return 1
    fi
  fi
}

check_token() {
  if [ -s "$TOKEN_FILE" ]; then
    CONTENT=$(cat "$TOKEN_FILE")
    if [ "$CONTENT" = "TOKEN_PLACEHOLDER" ] || [ ${#CONTENT} -lt 32 ]; then
      echo "invalid token contents: $CONTENT"
      rm -f "$TOKEN_FILE"
      if ! fetch_token; then
        echo "token fetch failed" >&2
        return 1
      fi
      if [ -s "$TOKEN_FILE" ]; then
        echo "token file created: $(cat "$TOKEN_FILE")"
      else
        echo "token file creation failed" >&2
        return 1
      fi
    else
      echo "token contents: $CONTENT"
    fi
  else
    echo "token file missing or empty: $TOKEN_FILE"
    if ! fetch_token; then
      echo "token fetch failed" >&2
      return 1
    fi
    if [ -s "$TOKEN_FILE" ]; then
      echo "token file created: $(cat "$TOKEN_FILE")"
    else
      echo "token file creation failed" >&2
      return 1
    fi
  fi
}

check_status() {
  if [ -x "$INIT" ]; then
    echo "cloudflared service status:"
    "$INIT" status || true
  else
    echo "init script missing: $INIT"
  fi
}

check_bin
check_token
check_status
