name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 curl

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Download OpenWrt SDK
      run: |
        set -euxo pipefail
        SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading OpenWrt SDK..."
        wget -q "$SDK_URL" -O sdk.tar.xz
        
        echo "Extracting SDK..."
        tar -xf sdk.tar.xz
        mv openwrt-sdk-* openwrt-sdk
        
        echo "SDK ready"

    - name: Build package using existing script
      run: |
        set -euxo pipefail
        
        # Use the existing build script pattern but adapted for GitHub Actions
        SDK_DIR="$(pwd)/openwrt-sdk"
        ARCH="x86_64"
        
        cd "$SDK_DIR"
        
        # Copy package into SDK
        mkdir -p package/utils/rvi-probe
        rsync -a --delete "$(pwd)/../package/rvi-probe/" package/utils/rvi-probe/
        
        # Verify the package has PKGARCH=all
        echo "Package Makefile PKGARCH setting:"
        grep PKGARCH package/utils/rvi-probe/Makefile || echo "PKGARCH not found"
        
        # Update and install feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Build configuration
        make defconfig
        
        # Build the package
        make package/rvi-probe/compile V=s
        
        echo "Build complete. Generated packages:"
        find bin/packages -name "*.ipk" -type f

    - name: Create package index
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Find the packages directory
        PACKAGES_DIR=$(find bin/packages -name "*rvi-probe*.ipk" -exec dirname {} \; | head -1)
        if [ -z "$PACKAGES_DIR" ]; then
          echo "ERROR: No rvi-probe package found"
          find bin/packages -type f
          exit 1
        fi
        
        echo "Found packages in: $PACKAGES_DIR"
        cd "$PACKAGES_DIR"
        
        # Use the existing script if available, otherwise create our own
        if [ -f "../../scripts/ipkg-make-index.sh" ]; then
          echo "Using OpenWrt package index script"
          ../../scripts/ipkg-make-index.sh . > Packages
        else
          echo "Creating custom package index"
          # Create a simple but effective package indexer
          for ipk in *.ipk; do
            [ -f "$ipk" ] || continue
            
            # Basic package info extraction
            SIZE=$(stat -c%s "$ipk")
            MD5=$(md5sum "$ipk" | cut -d' ' -f1)
            SHA256=$(sha256sum "$ipk" | cut -d' ' -f1)
            
            # Try to get package info from filename
            PKG_NAME=$(echo "$ipk" | sed 's/_.*$//')
            PKG_VERSION=$(echo "$ipk" | sed -n 's/.*_\([0-9][^_]*-[0-9][^_]*\)_.*/\1/p')
            PKG_ARCH=$(echo "$ipk" | sed -n 's/.*_\([^_]*\)\.ipk$/\1/p')
            
            # Create package entry using printf to avoid heredoc issues
            printf "Package: %s\n" "$PKG_NAME" >> Packages
            printf "Version: %s\n" "$PKG_VERSION" >> Packages
            printf "Architecture: all\n" >> Packages
            printf "Maintainer: RVInternetHelp <support@rvinternethelp.com>\n" >> Packages
            printf "Section: net\n" >> Packages
            printf "Priority: optional\n" >> Packages
            printf "Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util\n" >> Packages
            printf "Description: RVInternetHelp Network Probe\n" >> Packages
            printf " Support/diagnostics agent with outage checks, speed tests,\n" >> Packages
            printf " Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.\n" >> Packages
            printf "Filename: %s\n" "$ipk" >> Packages
            printf "Size: %s\n" "$SIZE" >> Packages
            printf "MD5Sum: %s\n" "$MD5" >> Packages
            printf "SHA256sum: %s\n" "$SHA256" >> Packages
            printf "\n" >> Packages
          done
        fi
        
        # Verify packages file was created
        if [ ! -s Packages ]; then
          echo "ERROR: Failed to create Packages file"
          exit 1
        fi
        
        echo "Generated Packages file:"
        cat Packages
        
        # Create compressed version
        gzip -fk9 Packages
        test -s Packages.gz

    - name: Prepare for upload
      run: |
        set -euxo pipefail
        
        # Store the repo root path
        REPO_ROOT=$(pwd)
        echo "Repo root: $REPO_ROOT"
        
        cd openwrt-sdk
        
        # Find packages directory
        PACKAGES_DIR=$(find bin/packages -name "*rvi-probe*.ipk" -exec dirname {} \; | head -1)
        echo "Packages directory: $PACKAGES_DIR"
        cd "$PACKAGES_DIR"
        
        # Create upload directory structure in repo root
        mkdir -p "$REPO_ROOT/upload/all"
        
        # Copy and rename packages to use 'all' architecture
        for ipk in *rvi-probe*.ipk; do
          [ -f "$ipk" ] || continue
          # Rename to use 'all' architecture
          new_name=$(echo "$ipk" | sed 's/_[^_]*\.ipk$/_all.ipk/')
          echo "Copying $ipk as $new_name"
          cp "$ipk" "$REPO_ROOT/upload/all/$new_name"
        done
        
        # Copy index files
        cp Packages "$REPO_ROOT/upload/all/"
        cp Packages.gz "$REPO_ROOT/upload/all/"
        [ -f Packages.sig ] && cp Packages.sig "$REPO_ROOT/upload/all/" || true
        
        echo "Files prepared for upload:"
        ls -la "$REPO_ROOT/upload/all/"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        
        # Check if upload directory exists
        if [ ! -d "upload/all" ]; then
          echo "ERROR: Upload directory not found"
          ls -la upload/ 2>/dev/null || echo "upload/ directory doesn't exist"
          ls -la . | head -10
          exit 1
        fi
        
        cd upload/all
        
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          # Install usign
          sudo apt-get install -y libbsd-dev build-essential cmake
          curl -fsSL "https://codeload.github.com/openwrt/usign/tar.gz/master" | tar -xz -C /tmp
          cd /tmp/usign-master
          cmake . && make && sudo make install
          cd -
          
          # Decode private key and sign
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          if usign -S -m Packages -s signing.key -x Packages.sig 2>/dev/null; then
            test -s Packages.sig
            echo "✅ Packages signed successfully"
          else
            echo "⚠️  Signing failed, continuing without signature"
          fi
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        # Go to upload directory
        cd upload/all
        
        echo "Files to upload:"
        ls -la
        
        # Set AWS credentials and endpoint
        export AWS_ACCESS_KEY_ID="$R2_ACCESS_KEY_ID"
        export AWS_SECRET_ACCESS_KEY="$R2_SECRET_ACCESS_KEY"
        ENDPOINT="https://$R2_ACCOUNT_ID.r2.cloudflarestorage.com"
        
        # Upload all files with proper content types (following your existing script pattern)
        aws s3 cp . "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --recursive --acl public-read --content-type text/plain || true
        
        # Re-upload specific files with correct content types
        find . -name 'Packages.gz' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/gzip --metadata-directive REPLACE \;
        find . -name 'Packages.sig' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/octet-stream --metadata-directive REPLACE \;
        find . -name '*.ipk' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/octet-stream --metadata-directive REPLACE \;
        
        echo "Published to: $R2_PUBLIC_BASE/openwrt/23.05/all/"

    - name: Verify upload
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        sleep 5
        
        echo "Verifying uploaded files..."
        
        # Check if Packages file is accessible and contains our package
        if curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" | grep -q "Package: rvi-probe"; then
          echo "✅ Packages file uploaded and contains rvi-probe"
        else
          echo "❌ Packages file missing or doesn't contain rvi-probe"
          exit 1
        fi
        
        # Verify at least one IPK was uploaded
        cd upload/all
        LOCAL_IPK=$(ls *rvi-probe*_all.ipk | head -1)
        IPK_NAME=$(basename "$LOCAL_IPK")
        
        echo "Verifying IPK: $IPK_NAME"
        LOCAL_MD5=$(md5sum "$LOCAL_IPK" | cut -d' ' -f1)
        REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/$IPK_NAME" | md5sum | cut -d' ' -f1)
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Upload verification successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi