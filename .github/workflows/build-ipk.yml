name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Verify package structure
      run: |
        set -euxo pipefail
        test -d package/rvi-probe/files || {
          echo "ERROR: package/rvi-probe/files directory not found"
          exit 1
        }
        echo "Package structure verified"

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y binutils coreutils fakeroot tar gzip findutils curl unzip sed

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Prepare package build
      run: |
        set -euxo pipefail
        mkdir -p dist/pkg/CONTROL dist/payload
        
        # Create control file
        cat > dist/pkg/CONTROL/control << 'EOL'
        Package: rvi-probe
        Version: 0.5.0-1
        Architecture: all
        Maintainer: OpenWrt Team
        Section: net
        Priority: optional
        Description: RVI probe shell plugin for OpenWrt
        EOL
        
        # Copy package files to payload while excluding CONTROL scripts
        rsync -a --exclude CONTROL package/rvi-probe/files/ dist/payload/

        # Copy CONTROL scripts for packaging
        cp package/rvi-probe/files/CONTROL/* dist/pkg/CONTROL/
        
        # Verify control file exists
        test -s dist/pkg/CONTROL/control

    - name: Build IPK package
      run: |
        set -euxo pipefail
        cd dist/pkg
        
        # Create debian-binary
        echo "2.0" > debian-binary
        
        # Create control archive
        tar -czf control.tar.gz -C CONTROL .
        test -s control.tar.gz
        
        # Create data archive
        tar -czf data.tar.gz -C ../payload .
        test -s data.tar.gz
        
        # Create final IPK using ar
        ar -cr rvi-probe_0.5.0-1_all.ipk debian-binary control.tar.gz data.tar.gz
        test -s rvi-probe_0.5.0-1_all.ipk
        
        # Move IPK to dist root
        mv rvi-probe_0.5.0-1_all.ipk ../
        cd ..
        test -s rvi-probe_0.5.0-1_all.ipk
        echo "IPK package built successfully"

    - name: Generate package index
      run: |
        set -euxo pipefail
        cd dist
        
        # Create minimal index generator script
        cat > generate_index.sh << 'EOL'
        #!/bin/bash
        set -euo pipefail
        
        for ipk in *.ipk; do
          echo "Processing: $ipk"
          
          # Create temp directory for extraction
          mkdir -p tmp_extract
          cd tmp_extract
          
          # Extract control.tar.gz from IPK and then extract its contents
          ar -p "../$ipk" control.tar.gz | tar -xzf -
          
          # Find and read the control file
          if [ -f control ]; then
            CONTROL_FILE="control"
          elif [ -f ./control ]; then
            CONTROL_FILE="./control"
          else
            echo "ERROR: control file not found in $ipk"
            ls -la
            exit 1
          fi
          
          # Calculate file size and hashes for the IPK
          cd ..
          SIZE=$(stat -c%s "$ipk")
          MD5=$(md5sum "$ipk" | cut -d' ' -f1)
          SHA256=$(sha256sum "$ipk" | cut -d' ' -f1)
          
          # Output package information
          cat "tmp_extract/$CONTROL_FILE"
          echo "Filename: $ipk"
          echo "Size: $SIZE"
          echo "MD5Sum: $MD5"
          echo "SHA256sum: $SHA256"
          echo ""
          
          # Clean up
          rm -rf tmp_extract
        done
        EOL
        
        chmod +x generate_index.sh
        ./generate_index.sh > Packages
        test -s Packages
        
        # Create compressed version
        gzip -c Packages > Packages.gz
        test -s Packages.gz
        
        echo "Package index generated"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ]; then
          echo "Signing enabled, creating signature"
          
          # Decode private key
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          # Install usign (minimal version for signing only)
          curl -sL "https://codeload.github.com/openwrt/usign/tar.gz/master" | \
            tar -xzf - --to-stdout "usign-master/usign.c" > usign.c
          gcc -o usign usign.c
          
          # Sign the Packages file
          cd dist
          ../usign -S -m Packages -s ../signing.key -x Packages.sig
          test -s Packages.sig
          
          echo "Packages signed"
        else
          echo "Signing disabled, skipping signature"
        fi

    - name: Upload to Cloudflare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      run: |
        set -euxo pipefail
        cd dist
        
        # Upload IPK package
        aws s3 cp rvi-probe_0.5.0-1_all.ipk \
          "s3://${R2_BUCKET}/openwrt/23.05/rvi-probe_0.5.0-1_all.ipk" \
          --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
          --acl public-read \
          --cache-control no-cache
        
        # Upload Packages index
        aws s3 cp Packages \
          "s3://${R2_BUCKET}/openwrt/23.05/Packages" \
          --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
          --acl public-read \
          --cache-control no-cache
        
        # Upload Packages.gz with correct MIME type
        aws s3 cp Packages.gz \
          "s3://${R2_BUCKET}/openwrt/23.05/Packages.gz" \
          --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
          --acl public-read \
          --content-type "application/gzip" \
          --metadata-directive REPLACE \
          --cache-control no-cache
        
        # Upload signature if it exists
        if [ -f Packages.sig ]; then
          aws s3 cp Packages.sig \
            "s3://${R2_BUCKET}/openwrt/23.05/Packages.sig" \
            --endpoint-url "https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com" \
            --acl public-read \
            --cache-control no-cache
        fi
        
        echo "Upload completed successfully"

    - name: Verify upload
      run: |
        set -euxo pipefail
        echo "Build and upload completed successfully!"
        echo "Published to: ${{ secrets.R2_PUBLIC_BASE }}/openwrt/23.05/"