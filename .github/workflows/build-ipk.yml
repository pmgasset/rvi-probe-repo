name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y binutils coreutils fakeroot tar gzip findutils curl unzip sed

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    # Install proper OpenWrt SDK tools for package indexing
    - name: Install OpenWrt SDK tools
      run: |
        set -euxo pipefail
        # Download minimal SDK just for the indexing tools
        curl -fsSL "https://downloads.openwrt.org/releases/23.05.3/targets/mediatek/filogic/openwrt-sdk-23.05.3-mediatek-filogic_gcc-12.3.0_musl.Linux-x86_64.tar.xz" | \
          tar -xJ --wildcards "*/scripts/opkg-make-index.sh" --strip-components=1
        chmod +x scripts/opkg-make-index.sh

    - name: Build IPK package
      run: |
        set -euxo pipefail
        mkdir -p dist/all dist/pkg/CONTROL dist/payload
        
        # Create control file with correct dependencies
        cat > dist/pkg/CONTROL/control << 'EOL'
        Package: rvi-probe
        Version: 0.5.0-1
        Architecture: all
        Maintainer: RVInternetHelp <support@rvinternethelp.com>
        Section: net
        Priority: optional
        Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util
        Description: RVInternetHelp Network Probe
         Support/diagnostics agent with outage checks, speed tests, 
         Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.
        EOL
        
        # Copy package files
        cp -r package/rvi-probe/files/* dist/payload/
        
        # Set proper permissions in the archive
        find dist/payload -type f -name "*.sh" -exec chmod 755 {} \;
        find dist/payload -path "*/bin/*" -type f -exec chmod 755 {} \;
        find dist/payload -path "*/init.d/*" -type f -exec chmod 755 {} \;
        find dist/payload -path "*/cgi-bin/*" -type f -exec chmod 755 {} \;
        
        cd dist/pkg
        
        # Create debian-binary
        echo "2.0" > debian-binary
        
        # Create control archive (OpenWrt uses specific tar format)
        tar --owner=0 --group=0 --numeric-owner -czf control.tar.gz -C CONTROL .
        
        # Create data archive (OpenWrt uses specific tar format)  
        tar --owner=0 --group=0 --numeric-owner -czf data.tar.gz -C ../payload .
        
        # Create IPK using ar (OpenWrt standard)
        ar -cr rvi-probe_0.5.0-1_all.ipk debian-binary control.tar.gz data.tar.gz
        
        # Move to architecture directory
        mv rvi-probe_0.5.0-1_all.ipk ../all/
        echo "IPK package built successfully"

    - name: Generate proper package index
      run: |
        set -euxo pipefail
        cd dist/all
        
        # Use OpenWrt's official opkg-make-index script
        ../../scripts/opkg-make-index.sh . > Packages
        
        # Verify the index was created
        test -s Packages
        echo "Generated Packages index:"
        head -20 Packages
        
        # Create compressed version
        gzip -fk9 Packages
        test -s Packages.gz
        
        echo "Package index generated successfully"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          # Install usign from OpenWrt source
          curl -fsSL "https://git.openwrt.org/project/usign.git/plain/usign.c" -o usign.c
          gcc -o usign usign.c -DUSE_LIBUBOX=0
          
          # Decode private key
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          # Sign the Packages file
          cd dist/all
          ../../usign -S -m Packages -s ../../signing.key -x Packages.sig
          test -s Packages.sig
          
          echo "Packages signed successfully"
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      run: |
        set -euxo pipefail
        cd dist/all
        
        ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
        
        # Upload files with proper content types and cache control
        
        # Upload IPK package
        aws s3 cp rvi-probe_0.5.0-1_all.ipk \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/octet-stream" \
          --cache-control "max-age=3600"
        
        # Upload Packages index with no-cache to ensure freshness
        aws s3 cp Packages \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "text/plain" \
          --cache-control "no-cache, must-revalidate"
        
        # Upload Packages.gz
        aws s3 cp Packages.gz \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/gzip" \
          --cache-control "no-cache, must-revalidate"
        
        # Upload signature if it exists
        if [ -f Packages.sig ]; then
          aws s3 cp Packages.sig \
            "s3://${R2_BUCKET}/openwrt/23.05/all/" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --content-type "application/octet-stream" \
            --cache-control "no-cache, must-revalidate"
        fi
        
        echo "Upload completed successfully"

    - name: Verify upload and checksums
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        # Wait a moment for R2 consistency
        sleep 5
        
        # Verify the uploaded files
        echo "Verifying uploaded files..."
        
        # Check if Packages file is accessible
        curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" | head -10
        
        # Check if IPK is accessible and matches local checksum
        LOCAL_MD5=$(md5sum dist/all/rvi-probe_0.5.0-1_all.ipk | cut -d' ' -f1)
        REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/rvi-probe_0.5.0-1_all.ipk" | md5sum | cut -d' ' -f1)
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Checksums match - upload successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi