name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 curl

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Download and setup OpenWrt SDK
      run: |
        set -euxo pipefail
        # Use a small, fast SDK - x86_64 generic is good for arch=all packages
        SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading OpenWrt SDK..."
        wget -q "$SDK_URL" -O sdk.tar.xz
        
        echo "Extracting SDK..."
        tar -xf sdk.tar.xz
        mv openwrt-sdk-* openwrt-sdk
        
        echo "SDK ready"

    - name: Setup package in SDK
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Copy our package into the SDK
        mkdir -p package/utils/rvi-probe
        cp -r ../package/rvi-probe/* package/utils/rvi-probe/
        
        # Update feeds (this is fast since we're not building dependencies)
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        echo "Package setup complete"

    - name: Build package
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Configure for our package only (very fast)
        make defconfig
        
        # Build just our package
        make package/rvi-probe/compile V=s
        
        echo "Package built successfully"

    - name: Generate package index
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages
        
        # Find the architecture directory
        ARCH_DIR=$(find . -name "*.ipk" -exec dirname {} \; | head -1 | xargs basename)
        echo "Found architecture: $ARCH_DIR"
        
        cd "$ARCH_DIR"
        
        # Verify our package exists
        test -f rvi-probe_*.ipk
        ls -la rvi-probe_*.ipk
        
        # Generate package index using OpenWrt's script
        ../../scripts/ipkg-make-index.sh . > Packages
        test -s Packages
        
        # Create compressed version
        gzip -fk9 Packages
        test -s Packages.gz
        
        echo "Package index generated"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages
        ARCH_DIR=$(find . -name "*.ipk" -exec dirname {} \; | head -1 | xargs basename)
        cd "$ARCH_DIR"
        
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          # Install usign
          sudo apt-get install -y libbsd-dev build-essential cmake
          curl -fsSL "https://codeload.github.com/openwrt/usign/tar.gz/master" | tar -xz -C /tmp
          cd /tmp/usign-master
          cmake .
          make
          sudo make install
          cd -
          
          # Decode private key
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          # Sign the Packages file
          if usign -S -m Packages -s signing.key -x Packages.sig 2>/dev/null; then
            test -s Packages.sig
            echo "✅ Packages signed successfully"
          else
            echo "⚠️  Signing failed, continuing without signature"
          fi
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages
        
        ARCH_DIR=$(find . -name "*.ipk" -exec dirname {} \; | head -1 | xargs basename)
        cd "$ARCH_DIR"
        
        ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
        
        # Upload IPK package
        aws s3 cp rvi-probe_*.ipk \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/octet-stream"
        
        # Upload Packages index
        aws s3 cp Packages \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "text/plain"
        
        # Upload Packages.gz
        aws s3 cp Packages.gz \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/gzip" \
          --metadata-directive REPLACE
        
        # Upload signature if it exists
        if [ -f Packages.sig ]; then
          aws s3 cp Packages.sig \
            "s3://${R2_BUCKET}/openwrt/23.05/all/" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --content-type "application/octet-stream"
        fi
        
        echo "Upload completed successfully"

    - name: Verify upload
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        sleep 5
        
        echo "Verifying uploaded files..."
        curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" | head -10 || true
        
        # Find the local IPK file for checksum verification
        cd openwrt-sdk/bin/packages
        ARCH_DIR=$(find . -name "*.ipk" -exec dirname {} \; | head -1 | xargs basename)
        LOCAL_IPK=$(find "$ARCH_DIR" -name "rvi-probe_*.ipk")
        IPK_NAME=$(basename "$LOCAL_IPK")
        
        LOCAL_MD5=$(md5sum "$LOCAL_IPK" | cut -d' ' -f1)
        REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/$IPK_NAME" | md5sum | cut -d' ' -f1)
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Upload verification successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi