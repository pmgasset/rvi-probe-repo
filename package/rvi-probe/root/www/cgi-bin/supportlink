#!/bin/sh
# SupportLink: status JSON + speedtest
# - Robust QUERY_STRING parsing (first param ok)
# - Cloudflare-only speed server via a LibreSpeed-compatible CLI (librespeed-cli or speedtest-go)
# - Auto-install on demand: opkg first, wget-from-GitHub fallback
# - Ookla CLI fallback if already present
# - Emits EXACTLY ONE JSON response; add &debug=1 for a trace

set -efu

# ---------- headers / helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g'; }
have() { command -v "$1" >/dev/null 2>&1; }

urldecode() { local s="${1//+/ }"; printf '%b' "${s//%/\\x}"; }
qs_get() {  # robust for first and later params
  local key="$1" qs="&${QUERY_STRING:-}&"
  local raw; raw="$(printf '%s' "$qs" | sed -n "s/.*[&]$key=\([^&]*\).*/\1/p" | head -n1)"
  [ -n "$raw" ] && urldecode "$raw" || printf ''
}

sha1hex() {
  if have sha1sum; then printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    awk -v s="$1" 'BEGIN{
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1));T[i]=x}
      c=compl(0);for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255);c=xor(T[c],rshift(c,8))}c=xor(c,compl(0));printf "%08x",and(c,0xffffffff)
    } function and(a,b){return a&b} function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function xor(a,b, i,r){r=0;for(i=0;i<32;i++){r+=and((and(a,1)^and(b,1)),2^i);a=rshift(a,1);b=rshift(b,1)};return r}
      function compl(x){return -1-x}'
  fi
}

emit_error() { # usage: emit_error "msg" [install] [debug]
  header
  printf '{'
  printf '"ok":false,"error":"%s"' "$(json_escape "$1")"
  [ -n "${2:-}" ] && printf ',"install":"%s"' "$(json_escape "$2")"
  [ -n "${3:-}" ] && printf ',"debug":"%s"'   "$(json_escape "$3")"
  printf '}\n'
}

# ---------- identity / status ----------
mac_addr=''
for IF in br-lan eth0 lan wan wlan0; do
  [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"
  [ -n "${mac_addr:-}" ] && break || true
done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"

uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"
tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"

bucket="$(date +%s | awk '{print int($1/300)}')"
seed="${hostname}:${bucket}:supportlink"
hex="$(sha1hex "$seed" | cut -c1-8)"
code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then
  WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"; [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"
  curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true
fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

# ---------- Cloudflare speed test ----------
CF_URL="https://speed.cloudflare.com"

# Map kernel arch -> release suffix
detect_goarch() {
  case "$(uname -m)" in
    x86_64|amd64)  echo "amd64" ;;
    aarch64|arm64) echo "arm64" ;;
    armv7l|armv7)  echo "armv7" ;;
    armv6l|armv6)  echo "armv6" ;;
    mipsel|mipsle) echo "mipsle" ;;
    mips)          echo "mips" ;;
    i686|i386)     echo "386" ;;
    *)             echo "" ;;
  esac
}

# Try to install a librespeed client:
# 1) opkg (preferred)
# 2) wget GitHub release (speedtest-go) to /usr/bin/speedtest-go
install_librespeed_auto() {
  # already present?
  command -v librespeed-cli >/dev/null 2>&1 && return 0
  command -v speedtest-go   >/dev/null 2>&1 && return 0

  # opkg path
  if command -v opkg >/dev/null 2>&1; then
    opkg update >/dev/null 2>&1 || true
    for PKG in librespeed-cli speedtest-go; do
      opkg --force-overwrite install "$PKG" >/dev/null 2>&1 && return 0 || true
    done
  fi

  # wget fallback (GitHub release of speedtest-go)
  if command -v wget >/dev/null 2>&1; then
    ARCH="$(detect_goarch)"
    [ -z "$ARCH" ] && return 1
    TMPD="/tmp/stg.$$"
    mkdir -p "$TMPD"
    # Try several common filename patterns used by releases
    BASE="https://github.com/librespeed/speedtest-go/releases/latest/download"
    set +e
    for F in \
      "speedtest-go_linux_${ARCH}.tar.gz" \
      "speedtest-go-linux-${ARCH}.tar.gz" \
      "speedtest-go_linux_${ARCH}.zip" \
      "speedtest-go-linux-${ARCH}.zip" \
      "speedtest-go_linux_${ARCH}" \
      "speedtest-go-linux-${ARCH}" ; do
      URL="${BASE}/${F}"
      OUT="${TMPD}/asset"
      wget -q -O "$OUT" "$URL" && {
        case "$F" in
          *.tar.gz) tar -xzf "$OUT" -C "$TMPD" >/dev/null 2>&1 ;;
          *.zip)    unzip -o "$OUT" -d "$TMPD" >/dev/null 2>&1 || true ;;
        esac
        # find a file named 'speedtest-go'
        BIN="$( (find "$TMPD" -maxdepth 2 -type f -name 'speedtest-go' 2>/dev/null || true) | head -n1 )"
        [ -z "$BIN" ] && { # maybe the asset itself is the binary
          chmod +x "$OUT" 2>/dev/null || true
          file "$OUT" 2>/dev/null | grep -q 'executable' && BIN="$OUT"
        }
        if [ -n "$BIN" ]; then
          mv "$BIN" /usr/bin/speedtest-go 2>/dev/null || cp "$BIN" /usr/bin/speedtest-go
          chmod +x /usr/bin/speedtest-go
          rm -rf "$TMPD"
          set -e
          return 0
        fi
      }
    done
    set -e
    rm -rf "$TMPD"
  fi

  return 1
}

run_cmd_json() { # usage: run_cmd_json "command string"
  CMD="$1"; OUT="/tmp/st_out.$$"; ERR="/tmp/st_err.$$"
  sh -c "$CMD" 1>"$OUT" 2>"$ERR" || true
  if grep -q '{' "$OUT" 2>/dev/null; then cat "$OUT"; rm -f "$OUT" "$ERR"; return 0; fi
  DBG="$(cat "$ERR" 2>/dev/null || true)"; rm -f "$OUT" "$ERR"; printf '%s' "$DBG"; return 1
}

# Return 0 if it PRINTED success JSON; 1 if it printed nothing
speedtest_cloudflare_or_install() {
  local TRIED="" RES ENGINE JSON
  # Try existing binaries first
  if command -v librespeed-cli >/dev/null 2>&1; then
    for F in "--server" "--url" "--host" ""; do
      [ -n "$F" ] && TRIED="$TRIED;librespeed-cli --json $F $CF_URL" || TRIED="$TRIED;librespeed-cli --json"
      RES="$(run_cmd_json "librespeed-cli --json $F $CF_URL")" && { ENGINE="librespeed-cli"; JSON="$RES"; break; }
    done
  elif command -v speedtest-go >/dev/null 2>&1; then
    for F in "--server" "--url" "--host" ""; do
      [ -n "$F" ] && TRIED="$TRIED;speedtest-go --json $F $CF_URL" || TRIED="$TRIED;speedtest-go --json"
      RES="$(run_cmd_json "speedtest-go --json $F $CF_URL")" && { ENGINE="speedtest-go"; JSON="$RES"; break; }
    done
  fi

  if [ -n "${JSON:-}" ]; then
    # Normalize → ping(ms), download/upload bandwidth (bps)
    ping="$(printf '%s' "$JSON" | sed -n 's/.*"ping"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
    down_mbps="$(printf '%s' "$JSON" | sed -n 's/.*"download"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
    up_mbps="$(printf '%s' "$JSON" | sed -n 's/.*"upload"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
    dbytes="$(printf '%s' "$JSON" | sed -n 's/.*"downloadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
    delap="$(printf '%s' "$JSON" | sed -n 's/.*"downloadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
    ubytes="$(printf '%s' "$JSON" | sed -n 's/.*"uploadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
    uelap="$(printf '%s' "$JSON" | sed -n 's/.*"uploadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"

    if [ -n "${down_mbps:-}" ]; then down_bps="$(awk -v M="$down_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
    elif [ -n "${dbytes:-}" ] && [ -n "${delap:-}" ] && [ "$delap" -gt 0 ]; then down_bps="$(awk -v B="$dbytes" -v MS="$delap" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else down_bps=0; fi
    if [ -n "${up_mbps:-}" ]; then up_bps="$(awk -v M="$up_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
    elif [ -n "${ubytes:-}" ] && [ -n "${uelap:-}" ] && [ "$uelap" -gt 0 ]; then up_bps="$(awk -v B="$ubytes" -v MS="$uelap" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else up_bps=0; fi
    [ -z "${ping:-}" ] && ping=0

    header
    printf '{'
    printf '"ok":true,"engine":"%s","server":"%s",' "$(json_escape "$ENGINE")" "$(json_escape "$CF_URL")"
    printf '"speedtest":{"ping":%s,"download":{"bandwidth":%s},"upload":{"bandwidth":%s}},' "$ping" "$down_bps" "$up_bps"
    printf '"raw":%s' "$(printf '%s' "$JSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
    if [ -n "$(qs_get debug)" ]; then printf ',"debug":"tried=%s"' "$(json_escape "${TRIED#;}")"; fi
    printf '}\n'
    return 0
  fi

  # Not present or failed → try to install, then rerun once
  if install_librespeed_auto; then
    speedtest_cloudflare_or_install  # recurse once; now binaries should exist
    return $?
  fi

  return 1
}

speedtest_ookla_if_present() {
  if command -v speedtest >/dev/null 2>&1; then
    OUT="/tmp/stdout_st.json"; ERR="/tmp/stderr_st.json"
    if speedtest --format=json --accept-license --accept-gdpr 1>"$OUT" 2>"$ERR"; then
      header; printf '{"ok":true,"engine":"ookla","speedtest":%s}\n' "$(cat "$OUT")"
      rm -f "$OUT" "$ERR"
      return 0
    fi
  fi
  return 1
}

# ---------- routing ----------
action="$(qs_get action)"

if [ -n "$action" ]; then
  case "$action" in
    speedtest)
      if speedtest_cloudflare_or_install; then exit 0; fi
      if speedtest_ookla_if_present; then exit 0; fi
      emit_error "no speedtest engine available" \
        "opkg update && opkg install librespeed-cli || opkg install speedtest-go" \
        "$( [ -n "$(qs_get debug)" ] && echo "wget-fallback tried; arch=$(uname -m)" || true )"
      exit 0
      ;;
    restart_router)
      header
      pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then printf '{"ok":false,"error":"bad pin"}\n'
      else (sleep 1; /sbin/reboot) >/dev/null 2>&1 & printf '{"ok":true}\n'
      fi
      exit 0
      ;;
    *)
      emit_error "unknown action"; exit 0 ;;
  esac
fi

# ---------- default: status JSON ----------
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
