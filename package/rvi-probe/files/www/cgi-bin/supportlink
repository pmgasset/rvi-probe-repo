#!/bin/sh
# SupportLink: status JSON + speedtest
# - LibreSpeed preferred (on-demand opkg install)
# - Tries multiple binaries/flags/servers
# - Ookla CLI fallback
# - Always returns informative JSON (never "unknown")

set -efu

# ---------- headers / helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g'; }
qs_get() { # usage: qs_get key
  key="$1"
  val="$(printf '%s' "${QUERY_STRING:-}" | sed -n "s/.*[?&]$key=\([^&]*\).*/\1/p")"
  printf '%s' "$val" | sed -e 's/+/%20/g' -e 's/%20/ /g' -e 's/%3A/:/ig' -e 's/%2F/\//ig'
}
have() { command -v "$1" >/dev/null 2>&1; }

sha1hex() {
  if have sha1sum; then
    printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then
    printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    # simple CRC32 fallback so the 6-digit code stays stable across 5-min buckets
    awk -v s="$1" 'BEGIN{
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1)); T[i]=x}
      c=compl(0);
      for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255); c=xor(T[c], rshift(c,8))}
      c=xor(c,compl(0)); printf "%08x", and(c,0xffffffff)
    } function and(a,b){return a&b}
      function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function xor(a,b, i,r){r=0;for(i=0;i<32;i++){r+=and((and(a,1)^and(b,1)),2^i);a=rshift(a,1);b=rshift(b,1)};return r}
      function compl(x){return -1-x}
    '
  fi
}

emit_error() { # usage: emit_error "message" [install_hint] [debug]
  header
  printf '{'
  printf '"ok":false,"error":"%s"' "$(json_escape "$1")"
  [ -n "${2:-}" ] && printf ',"install":"%s"' "$(json_escape "$2")"
  [ -n "${3:-}" ] && printf ',"debug":"%s"'   "$(json_escape "$3")"
  printf '}\n'
}

# ---------- device identity / status ----------
mac_addr=''
for IF in br-lan eth0 lan wan wlan0; do
  [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"
  [ -n "${mac_addr:-}" ] && break || true
done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"

uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"
tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"

bucket="$(date +%s | awk '{print int($1/300)}')"
seed="${hostname}:${bucket}:supportlink"
hex="$(sha1hex "$seed" | cut -c1-8)"
code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then
  WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"
  [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"
  curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true
fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

# ---------- LibreSpeed installer + runner ----------
try_install_librespeed() {
  INSTALL_HINT=''
  have opkg || return 1
  opkg update >/dev/null 2>&1 || true
  for PKG in librespeed-cli speedtest-go librespeed-go; do
    INSTALL_HINT="opkg install $PKG"
    opkg --force-overwrite install "$PKG" >/dev/null 2>&1 && return 0 || true
  done
  return 1
}

# run a command, capture stdout/stderr to files, and verify we got JSON
run_cmd_json() { # usage: run_cmd_json "cmdline"
  CMDLINE="$1"
  OUT="/tmp/st_out.$$"; ERR="/tmp/st_err.$$"
  # shellcheck disable=SC2086
  sh -c "$CMDLINE" 1>"$OUT" 2>"$ERR" || true
  if grep -q '{' "$OUT" 2>/dev/null; then
    cat "$OUT"
    rm -f "$OUT" "$ERR"
    return 0
  fi
  DB="$(cat "$ERR" 2>/dev/null || true)"
  rm -f "$OUT" "$ERR"
  printf '%s' "$DB"
  return 1
}

run_librespeed_json() {
  BINS="librespeed-cli speedtest-go librespeed"
  SRVS="https://speed.cloudflare.com https://librespeed.org"
  TRIED=""
  # 1) Try each binary with no args (some builds auto-select servers)
  for B in $BINS; do
    if have "$B"; then
      TRIED="$TRIED;$B --json"
      RES="$(run_cmd_json "$B --json")" && { ENGINE="$B"; SERVER="auto"; JSON="$RES"; return 0; }
    fi
  done
  # 2) Try with common server flags/aliases
  for B in $BINS; do
    have "$B" || continue
    for S in $SRVS; do
      for FLAG in "--server" "--url" "--host"; do
        TRIED="$TRIED;$B --json $FLAG $S"
        RES="$(run_cmd_json "$B --json $FLAG $S")" && { ENGINE="$B"; SERVER="$S"; JSON="$RES"; return 0; }
      done
    done
  done
  DEBUG_TRIED="$(printf '%s' "$TRIED" | sed 's/^;//')"
  return 1
}

normalize_librespeed() {
  STJSON="$1"
  # extract numbers if present
  ping="$(printf '%s' "$STJSON" | sed -n 's/.*"ping"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  down_mbps="$(printf '%s' "$STJSON" | sed -n 's/.*"download"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  up_mbps="$(printf '%s' "$STJSON" | sed -n 's/.*"upload"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  dbytes="$(printf '%s' "$STJSON" | sed -n 's/.*"downloadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  delap="$(printf '%s' "$STJSON" | sed -n 's/.*"downloadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  ubytes="$(printf '%s' "$STJSON" | sed -n 's/.*"uploadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  uelap="$(printf '%s' "$STJSON" | sed -n 's/.*"uploadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"

  if [ -n "${down_mbps:-}" ]; then
    down_bps="$(awk -v M="$down_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "${dbytes:-}" ] && [ -n "${delap:-}" ] && [ "$delap" -gt 0 ]; then
    down_bps="$(awk -v B="$dbytes" -v MS="$delap" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"
  else
    down_bps=0
  fi

  if [ -n "${up_mbps:-}" ]; then
    up_bps="$(awk -v M="$up_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "${ubytes:-}" ] && [ -n "${uelap:-}" ] && [ "$uelap" -gt 0 ]; then
    up_bps="$(awk -v B="$ubytes" -v MS="$uelap" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"
  else
    up_bps=0
  fi

  [ -z "${ping:-}" ] && ping=0
  printf '%s' '{"ping":'$ping',"download":{"bandwidth":'$down_bps'},"upload":{"bandwidth":'$up_bps'}}'
}

speedtest_librespeed() {
  DEBUG="$(qs_get debug)"
  if run_librespeed_json; then
    NORM="$(normalize_librespeed "$JSON")"
    header
    printf '{'
    printf '"ok":true,"engine":"%s","server":"%s",' "$(json_escape "$ENGINE")" "$(json_escape "$SERVER")"
    printf '"speedtest":%s,' "$NORM"
    printf '"raw":%s' "$(printf '%s' "$JSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
    [ -n "$DEBUG" ] && printf ',"debug":"%s"' "$(json_escape "engine=$ENGINE server=$SERVER")"
    printf '}\n'
    return 0
  fi
  # try on-demand install then retry once
  if try_install_librespeed && run_librespeed_json; then
    NORM="$(normalize_librespeed "$JSON")"
    header
    printf '{'
    printf '"ok":true,"engine":"%s","server":"%s",' "$(json_escape "$ENGINE")" "$(json_escape "$SERVER")"
    printf '"speedtest":%s,' "$NORM"
    printf '"raw":%s' "$(printf '%s' "$JSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
    printf '}\n'
    return 0
  fi
  # if we got here, librespeed failed
  hint="opkg update && opkg install librespeed-cli (or speedtest-go)"
  dbg="bins=librespeed-cli,speedtest-go,librespeed; servers=https://speed.cloudflare.com,https://librespeed.org; tried=${DEBUG_TRIED:-none}"
  [ -n "$INSTALL_HINT" ] && hint="opkg update && $INSTALL_HINT"
  emit_error "librespeed unavailable or returned no JSON" "$hint" "$(qs_get debug | sed 's/.*/'$dbg'/')"
  return 1
}

# ---------- Ookla fallback ----------
speedtest_ookla() {
  if have speedtest; then
    OUT="/tmp/stdout_st.json"; ERR="/tmp/stderr_st.json"
    if speedtest --format=json --accept-license --accept-gdpr 1>"$OUT" 2>"$ERR"; then
      header
      printf '{"ok":true,"engine":"ookla","speedtest":%s}\n' "$(cat "$OUT")"
      rm -f "$OUT" "$ERR"
    else
      emit_error "ookla speedtest failed" "" "$(cat "$ERR" 2>/dev/null || true)"
    fi
  else
    hint="opkg update && wget -qO- https://install.speedtest.net/app/cli/install.sh | sh"
    emit_error "no speedtest engine available" "$hint"
  fi
}

# ---------- routing ----------
action="$(qs_get action)"

if [ -n "$action" ]; then
  case "$action" in
    speedtest)
      # Prefer LibreSpeed, then fall back to Ookla.
      speedtest_librespeed || speedtest_ookla
      exit 0
      ;;
    restart_router)
      header
      pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then
        printf '{"ok":false,"error":"bad pin"}\n'
      else
        (sleep 1; /sbin/reboot) >/dev/null 2>&1 &
        printf '{"ok":true}\n'
      fi
      exit 0
      ;;
    *)
      emit_error "unknown action"
      exit 0 ;;
  esac
fi

# ---------- default: status JSON ----------
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
