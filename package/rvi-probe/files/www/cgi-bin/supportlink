#!/bin/sh
# SupportLink: status JSON + speedtest
# - Auto-installs librespeed-cli from R2: https://r2.rvinternethelp.com/librespeed/<REL>/<ARCH>/
# - Validates SHA256 with SHA256SUMS if available
# - Runs against Cloudflare: https://speed.cloudflare.com
# - Ookla CLI is used only if already installed
# - Robust query parsing; emits exactly one JSON result
# - FIX: valid JSON always (properly quoted "raw" or omitted)
# - FIX: "bandwidth" returned in BYTES/SEC to match frontend (which multiplies by 8)

set -efu

# ---------- headers / helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g'; }
# Properly quote a possibly multi-line string as a JSON string
json_quote() {
  awk 'BEGIN{printf("\"")} {
    gsub(/\\/,"\\\\"); gsub(/"/,"\\\"");
    gsub(/\r/,"\\r"); gsub(/\n/,"\\n"); gsub(/\t/,"\\t");
    printf("%s", $0); if (NR<0) printf("\\n")
  } END{printf("\"")}'
}
have() { command -v "$1" >/dev/null 2>&1; }

urldecode(){ local s="${1//+/ }"; printf '%b' "${s//%/\\x}"; }
qs_get(){ local key="$1" qs="&${QUERY_STRING:-}&" raw; raw="$(printf '%s' "$qs" | sed -n "s/.*[&]$key=\([^&]*\).*/\1/p" | head -n1)"; [ -n "$raw" ] && urldecode "$raw" || printf ''; }

sha1hex() {
  if have sha1sum; then printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    awk -v s="$1" 'BEGIN{
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1));T[i]=x}
      c=compl(0);for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255);c=xor(T[c],rshift(c,8))}c=xor(c,compl(0));printf "%08x",and(c,0xffffffff)
    } function and(a,b){return a&b} function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function xor(a,b, i,r){r=0;for(i=0;i<32;i++){r+=and((and(a,1)^and(b,1)),2^i);a=rshift(a,1);b=rshift(b,1)};return r}
      function compl(x){return -1-x}'
  fi
}

emit_error(){ header; printf '{"ok":false,"error":"%s"%s%s}\n' "$(json_escape "$1")" "${2:+,\"install\":\"$(json_escape "$2")\"}" "${3:+,\"debug\":\"$(json_escape "$3")\"}"; }

# ---------- identity / status ----------
mac_addr=''; for IF in br-lan eth0 lan wan wlan0; do [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"; [ -n "${mac_addr:-}" ] && break || true; done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"
uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"
tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"
bucket="$(date +%s | awk '{print int($1/300)}')"; seed="${hostname}:${bucket}:supportlink"; hex="$(sha1hex "$seed" | cut -c1-8)"; code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"; [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"; curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true; fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

# ---------- R2 layout ----------
R2_BASE="$(uci -q get rviprobe.config.r2_base || true)"; [ -z "${R2_BASE:-}" ] && R2_BASE="https://r2.rvinternethelp.com/librespeed"

owrt_rel="$(sed -n "s/.*DISTRIB_RELEASE='\([^']*\)'.*/\1/p" /etc/openwrt_release 2>/dev/null | head -n1)"
REL_SHORT="$(printf '%s' "$owrt_rel" | awk -F. '{print $1"."$2}')"
ARCH="$(sed -n "s/.*DISTRIB_ARCH='\([^']*\)'.*/\1/p" /etc/openwrt_release 2>/dev/null | head -n1)"
if [ -z "$ARCH" ]; then
  case "$(uname -m)" in
    aarch64|arm64) ARCH="aarch64_cortex-a53" ;;
    x86_64|amd64)  ARCH="x86_64" ;;
    *)             ARCH="unknown" ;;
  esac
fi
[ -z "$REL_SHORT" ] && REL_SHORT="23.05"

R2_DIR="${R2_BASE%/}/${REL_SHORT}/${ARCH}"
R2_BIN="${R2_DIR}/librespeed-cli"
R2_SUM="${R2_DIR}/SHA256SUMS"

# ---------- fetch & verify ----------
fetch(){ if have curl; then curl -fsSL "$1" -o "$2"; elif have wget; then wget -q -O "$2" "$1"; else return 1; fi }
sha256_of(){ if have sha256sum; then sha256sum "$1" | awk '{print $1}'; elif have openssl; then openssl dgst -sha256 "$1" | awk '{print $2}'; else echo ""; fi; }

install_librespeed_from_r2(){
  command -v librespeed-cli >/dev/null 2>&1 && { LS_DBG="already_installed"; return 0; }
  local tmp="/tmp/librespeed-cli.$$" sums="/tmp/SHA256SUMS.$$" exp="" got=""
  LS_DBG="rel=${REL_SHORT}; arch=${ARCH}; dir=${R2_DIR}"
  if ! fetch "$R2_BIN" "$tmp"; then LS_DBG="$LS_DBG; fetch_bin_failed"; return 1; fi
  chmod +x "$tmp" 2>/dev/null || true
  if fetch "$R2_SUM" "$sums"; then
    exp="$(grep -E '[[:space:]]librespeed-cli$' "$sums" | awk '{print $1}' | head -n1 || true)"
    if [ -n "$exp" ]; then
      got="$(sha256_of "$tmp")"
      if [ -z "$got" ] || [ "$got" != "$exp" ]; then LS_DBG="$LS_DBG; sha_mismatch got=${got:-none} exp=$exp"; rm -f "$tmp" "$sums"; return 1; fi
    fi
  fi
  rm -f "$sums"
  mv "$tmp" /usr/bin/librespeed-cli 2>/dev/null || cp "$tmp" /usr/bin/librespeed-cli
  chmod +x /usr/bin/librespeed-cli
  LS_DBG="$LS_DBG; installed=/usr/bin/librespeed-cli"
  return 0
}

# ---------- run Cloudflare test ----------
CF_URL="https://speed.cloudflare.com"

run_cmd_json(){ local CMD="$1" OUT="/tmp/st_out.$$" ERR="/tmp/st_err.$$"; sh -c "$CMD" 1>"$OUT" 2>"$ERR" || true; if grep -q '{' "$OUT" 2>/dev/null; then cat "$OUT"; rm -f "$OUT" "$ERR"; return 0; fi; DBG="$(cat "$ERR" 2>/dev/null || true)"; rm -f "$OUT" "$ERR"; printf '%s' "$DBG"; return 1; }

# Normalize to UI contract: bandwidth must be BYTES/SEC (frontend multiplies by 8)
normalize_ls_json_to_bytes(){
  # INPUT: $1 raw JSON; OUTPUT to stdout a fragment:
  # {"ping":<ms>,"download":{"bandwidth":<bytes/s>},"upload":{"bandwidth":<bytes/s>}}
  local ST="$1" ping dmb umb dB dT uB uT down_bps up_bps down_Bps up_Bps
  ping="$(printf '%s' "$ST" | sed -n 's/.*"ping"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  dmb="$(printf '%s' "$ST" | sed -n 's/.*"download"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  umb="$(printf '%s' "$ST" | sed -n 's/.*"upload"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  dB="$(printf '%s' "$ST" | sed -n 's/.*"downloadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  dT="$(printf '%s' "$ST" | sed -n 's/.*"downloadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  uB="$(printf '%s' "$ST" | sed -n 's/.*"uploadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  uT="$(printf '%s' "$ST" | sed -n 's/.*"uploadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"

  # Compute bits/sec first, then convert to BYTES/sec (divide by 8)
  if [ -n "$dmb" ]; then down_bps="$(awk -v M="$dmb" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "$dB" ] && [ -n "$dT" ] && [ "$dT" -gt 0 ]; then down_bps="$(awk -v B="$dB" -v MS="$dT" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else down_bps=0; fi
  if [ -n "$umb" ]; then up_bps="$(awk -v M="$umb" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "$uB" ] && [ -n "$uT" ] && [ "$uT" -gt 0 ]; then up_bps="$(awk -v B="$uB" -v MS="$uT" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else up_bps=0; fi

  down_Bps="$(awk -v B="$down_bps" 'BEGIN{printf "%.0f", B/8}')"
  up_Bps="$(awk -v B="$up_bps"   'BEGIN{printf "%.0f", B/8}')"
  [ -z "$ping" ] && ping=0

  printf '{"ping":%s,"download":{"bandwidth":%s},"upload":{"bandwidth":%s}}' "$ping" "$down_Bps" "$up_Bps"
}

run_librespeed_cloudflare(){
  local JSON TRIED=""
  if command -v librespeed-cli >/dev/null 2>&1; then
    for F in "--server" "--url" "--host" ""; do
      [ -n "$F" ] && TRIED="$TRIED;librespeed-cli --json $F $CF_URL" || TRIED="$TRIED;librespeed-cli --json"
      JSON="$(run_cmd_json "librespeed-cli --json $F $CF_URL")" && { NORM="$(normalize_ls_json_to_bytes "$JSON")"; ENGINE="librespeed-cli"; TRIED="${TRIED#;}"; return 0; }
    done
  fi
  TRIED="${TRIED#;}"
  return 1
}

# ---------- Ookla fallback (only if present) ----------
run_ookla_if_present(){
  if command -v speedtest >/dev/null 2>&1; then
    local OUT="/tmp/stdout_st.json" ERR="/tmp/stderr_st.json"
    if speedtest --format=json --accept-license --accept-gdpr 1>"$OUT" 2>"$ERR"; then
      header; printf '{"ok":true,"engine":"ookla","speedtest":%s}\n' "$(cat "$OUT")"; rm -f "$OUT" "$ERR"; return 0
    fi
  fi
  return 1
}

# ---------- routing ----------
action="$(qs_get action)"
CF_URL="https://speed.cloudflare.com"

if [ -n "$action" ]; then
  case "$action" in
    speedtest)
      # Already installed?
      if run_librespeed_cloudflare; then
        header
        printf '{"ok":true,"engine":"%s","server":"%s","speedtest":%s' "$ENGINE" "$CF_URL" "$NORM"
        if [ -n "${JSON:-}" ]; then
          printf ',"raw":'; printf '%s' "$JSON" | json_quote
        fi
        [ -n "$(qs_get debug)" ] && printf ',"debug":"tried=%s"' "$(json_escape "$TRIED")"
        printf '}\n'
        exit 0
      fi
      # Install from R2 then retry once
      if install_librespeed_from_r2 && run_librespeed_cloudflare; then
        header
        printf '{"ok":true,"engine":"%s","server":"%s","speedtest":%s' "$ENGINE" "$CF_URL" "$NORM"
        if [ -n "${JSON:-}" ]; then
          printf ',"raw":'; printf '%s' "$JSON" | json_quote
        fi
        [ -n "$(qs_get debug)" ] && printf ',"debug":"installed_from_r2; %s; tried=%s"' "$(json_escape "$LS_DBG")" "$(json_escape "$TRIED")"
        printf '}\n'
        exit 0
      fi
      # Last resort: Ookla if present
      if run_ookla_if_present; then exit 0; fi
      emit_error "no speedtest client available" "ensure ${R2_DIR} contains librespeed-cli and SHA256SUMS" "${LS_DBG:-not_installed}"
      exit 0
      ;;
    restart_router)
      header; pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then printf '{"ok":false,"error":"bad pin"}\n'
      else (sleep 1; /sbin/reboot) >/dev/null 2>&1 & printf '{"ok":true}\n'
      fi
      exit 0
      ;;
    *) emit_error "unknown action"; exit 0 ;;
  esac
fi

# ---------- default: status JSON ----------
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
