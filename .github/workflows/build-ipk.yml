name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 curl

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Download and setup OpenWrt SDK
      run: |
        set -euxo pipefail
        SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading OpenWrt SDK..."
        wget -q "$SDK_URL" -O sdk.tar.xz
        
        echo "Extracting SDK..."
        tar -xf sdk.tar.xz
        mv openwrt-sdk-* openwrt-sdk
        
        echo "SDK ready"

    - name: Setup package in SDK
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Copy our package into the SDK
        mkdir -p package/utils/rvi-probe
        cp -r ../package/rvi-probe/* package/utils/rvi-probe/
        
        # Verify and show the original Makefile
        echo "Original Package Makefile:"
        cat package/utils/rvi-probe/Makefile
        
        # Update feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        echo "Package setup complete"

    - name: Build package
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Configure build
        make defconfig
        
        # Force architecture to 'all' in the Makefile
        sed -i '/^PKGARCH:=/c\PKGARCH:=all' package/utils/rvi-probe/Makefile
        
        echo "Modified Makefile:"
        grep -A5 -B5 PKGARCH package/utils/rvi-probe/Makefile || echo "PKGARCH line not found"
        
        # Build just our package
        make package/rvi-probe/compile V=s
        
        echo "Build complete. All built packages:"
        find bin/ -name "*.ipk" -type f

    - name: Validate and generate package index
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages
        
        echo "Looking for built packages..."
        find . -name "*rvi-probe*.ipk" -type f
        
        # Get the directory containing our package
        PACKAGE_PATH=$(find . -name "*rvi-probe*.ipk" -type f | head -1)
        if [ -z "$PACKAGE_PATH" ]; then
          echo "ERROR: No rvi-probe package found!"
          echo "All files in bin/packages:"
          find . -type f
          exit 1
        fi
        
        ARCH_DIR=$(dirname "$PACKAGE_PATH")
        echo "Found package in: $ARCH_DIR"
        
        cd "$ARCH_DIR"
        
        # Validate the package has content
        ORIGINAL_IPK=$(ls *rvi-probe*.ipk | head -1)
        echo "Validating package: $ORIGINAL_IPK"
        
        # Check package size
        IPK_SIZE=$(stat -c%s "$ORIGINAL_IPK")
        echo "Package size: $IPK_SIZE bytes"
        if [ "$IPK_SIZE" -lt 1000 ]; then
          echo "ERROR: Package too small, likely empty!"
          exit 1
        fi
        
        # Test package structure
        echo "Package structure:"
        ar -t "$ORIGINAL_IPK"
        
        # Verify we can extract data
        echo "Testing package data extraction:"
        ar -p "$ORIGINAL_IPK" data.tar.gz | tar -tzf - | wc -l
        
        # Create the index generator script
        cat > make-index.sh << 'SCRIPT_END'
        #!/bin/bash
        set -euo pipefail
        
        for ipk in *.ipk; do
          [ -f "$ipk" ] || continue
          
          echo "Processing: $ipk" >&2
          
          TMP_DIR=$(mktemp -d)
          trap "rm -rf $TMP_DIR" EXIT
          
          if ! ar -p "$ipk" control.tar.gz | tar -xzf - -C "$TMP_DIR" 2>/dev/null; then
            echo "Error: Failed to extract control from $ipk" >&2
            continue
          fi
          
          if [ -f "$TMP_DIR/control" ]; then
            CONTROL_FILE="$TMP_DIR/control"
          else
            echo "Error: No control file found in $ipk" >&2
            continue
          fi
          
          SIZE=$(stat -c%s "$ipk")
          MD5=$(md5sum "$ipk" | cut -d' ' -f1)
          SHA256=$(sha256sum "$ipk" | cut -d' ' -f1)
          
          cat "$CONTROL_FILE"
          echo "Filename: $ipk"
          echo "Size: $SIZE"
          echo "MD5Sum: $MD5"
          echo "SHA256sum: $SHA256"
          echo ""
          
          rm -rf "$TMP_DIR"
        done
        SCRIPT_END
        
        chmod +x make-index.sh
        
        # Generate index
        echo "Generating package index..."
        ./make-index.sh > Packages
        
        if [ ! -s Packages ]; then
          echo "ERROR: Failed to generate Packages file!"
          exit 1
        fi
        
        echo "Generated Packages file:"
        cat Packages
        
        # Verify the package is in the index
        if ! grep -q "Package: rvi-probe" Packages; then
          echo "ERROR: rvi-probe not found in Packages index!"
          exit 1
        fi
        
        # Create compressed version
        gzip -fk9 Packages
        test -s Packages.gz
        
        echo "Package index generated successfully"

    - name: Copy to standard location and fix architecture
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages
        
        # Find our package
        PACKAGE_PATH=$(find . -name "*rvi-probe*.ipk" -type f | head -1)
        ARCH_DIR=$(dirname "$PACKAGE_PATH")
        
        echo "Original package location: $ARCH_DIR"
        cd "$ARCH_DIR"
        
        # Create all directory
        mkdir -p ../../all
        
        # Get the original package name
        ORIGINAL_IPK=$(ls *rvi-probe*.ipk | head -1)
        echo "Original IPK: $ORIGINAL_IPK"
        
        # Create the correct name for 'all' architecture (more precise regex)
        NEW_IPK=$(echo "$ORIGINAL_IPK" | sed 's/_[^_]*\.ipk$/_all.ipk/')
        echo "New IPK name: $NEW_IPK"
        
        # Verify the new name is different and valid
        if [ "$ORIGINAL_IPK" = "$NEW_IPK" ]; then
          echo "Warning: Package name didn't change, might already be correct"
        fi
        
        # Copy files to all/ directory
        cp "$ORIGINAL_IPK" "../../all/$NEW_IPK"
        cp Packages ../../all/
        cp Packages.gz ../../all/
        [ -f Packages.sig ] && cp Packages.sig ../../all/ || true
        
        # Verify files were copied
        echo "Files in all/ directory:"
        ls -la ../../all/
        
        # Verify the new IPK exists and has correct size
        cd ../../all
        if [ ! -f "$NEW_IPK" ]; then
          echo "ERROR: Failed to copy IPK to all/ directory!"
          exit 1
        fi
        
        NEW_SIZE=$(stat -c%s "$NEW_IPK")
        echo "New IPK size: $NEW_SIZE bytes"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages/all
        
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          sudo apt-get install -y libbsd-dev build-essential cmake
          curl -fsSL "https://codeload.github.com/openwrt/usign/tar.gz/master" | tar -xz -C /tmp
          cd /tmp/usign-master
          cmake . && make && sudo make install
          cd -
          
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          if usign -S -m Packages -s signing.key -x Packages.sig 2>/dev/null; then
            test -s Packages.sig
            echo "✅ Packages signed successfully"
          else
            echo "⚠️  Signing failed, continuing without signature"
          fi
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      run: |
        set -euxo pipefail
        cd openwrt-sdk/bin/packages/all
        
        echo "Files to upload:"
        ls -la
        
        # Verify we have files to upload
        IPK_COUNT=$(ls *rvi-probe*_all.ipk 2>/dev/null | wc -l)
        if [ "$IPK_COUNT" -eq 0 ]; then
          echo "ERROR: No IPK files found to upload!"
          exit 1
        fi
        
        ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
        
        # Upload IPK packages
        for file in *rvi-probe*_all.ipk; do
          [ -f "$file" ] || continue
          echo "Uploading $file"
          aws s3 cp "$file" \
            "s3://${R2_BUCKET}/openwrt/23.05/all/" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --content-type "application/octet-stream"
        done
        
        echo "Uploading Packages index"
        aws s3 cp Packages \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "text/plain"
        
        echo "Uploading Packages.gz"
        aws s3 cp Packages.gz \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/gzip" \
          --metadata-directive REPLACE
        
        if [ -f Packages.sig ]; then
          echo "Uploading signature"
          aws s3 cp Packages.sig \
            "s3://${R2_BUCKET}/openwrt/23.05/all/" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --content-type "application/octet-stream"
        fi
        
        echo "Upload completed successfully"

    - name: Verify upload
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        sleep 5
        
        echo "Verifying uploaded files..."
        
        # Verify Packages file
        if ! curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" > /tmp/remote_packages; then
          echo "ERROR: Failed to fetch Packages file from R2"
          exit 1
        fi
        
        echo "Remote Packages file content:"
        cat /tmp/remote_packages
        
        # Verify our package is in the remote index
        if ! grep -q "Package: rvi-probe" /tmp/remote_packages; then
          echo "ERROR: rvi-probe not found in remote Packages file!"
          exit 1
        fi
        
        # Verify IPK checksum
        cd openwrt-sdk/bin/packages/all
        LOCAL_IPK=$(ls *rvi-probe*_all.ipk | head -1)
        IPK_NAME=$(basename "$LOCAL_IPK")
        
        echo "Verifying $IPK_NAME"
        LOCAL_MD5=$(md5sum "$LOCAL_IPK" | cut -d' ' -f1)
        
        if ! REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/$IPK_NAME" | md5sum | cut -d' ' -f1); then
          echo "ERROR: Failed to download IPK from R2 for verification"
          exit 1
        fi
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Upload verification successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi