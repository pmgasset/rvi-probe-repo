#!/bin/sh
set -e

# ---- existing logic ----
MARK_DIR="/etc/rvi-probe"; UHTTPD_MARK="$MARK_DIR/uhttpd_installed"; CF_MARK="$MARK_DIR/cloudflared_configured"; mkdir -p "$MARK_DIR"
add_uhttpd() {
  if ! uci -q show uhttpd | grep -q "config uhttpd 'rvi'"; then
    uci -q add uhttpd uhttpd >/dev/null
    IDX=$(uci -q show uhttpd | awk -F'[][]' '/^uhttpd\.\@uhttpd\[[0-9]+\]=uhttpd/{print $2}' | tail -n1)
    [ -n "$IDX" ] && {
      uci -q set uhttpd.@uhttpd[$IDX].listen_http='127.0.0.1:8081'
      uci -q set uhttpd.@uhttpd[$IDX].home='/www'
      uci -q add_list uhttpd.@uhttpd[$IDX].cgi_prefix='/cgi-bin'
      uci -q set uhttpd.@uhttpd[$IDX].script_timeout='60'
      uci -q set uhttpd.@uhttpd[$IDX].network_timeout='30'
      uci -q set uhttpd.@uhttpd[$IDX].tcp_keepalive='1'
      uci -q add_list uhttpd.@uhttpd[$IDX].alias='/json=/cgi-bin/json'
      uci -q commit uhttpd
      touch "$UHTTPD_MARK"
    }
  else
    uci -q add_list uhttpd.rvi.alias='/json=/cgi-bin/json' 2>/dev/null || true
    uci -q commit uhttpd
  fi
  /etc/init.d/uhttpd reload >/dev/null 2>&1 || true
}
setup_cloudflared() {
  [ -x /etc/init.d/cloudflared ] || return 0
  CFG=/etc/cloudflared/config.yml
  if [ ! -s "$CFG" ] || ! grep -q "127.0.0.1:8081" "$CFG" 2>/dev/null; then
    mkdir -p /etc/cloudflared
    cat > "$CFG" <<'YAML'
url: http://127.0.0.1:8081
metrics: 127.0.0.1:2000
ingress:
  - service: http://127.0.0.1:8081
  - service: http_status:404
YAML
    touch "$CF_MARK"
  fi
  /etc/init.d/cloudflared enable >/dev/null 2>&1 || true
  /etc/init.d/cloudflared restart >/dev/null 2>&1 || true
}
chmod 0755 /usr/bin/rvi-* /usr/lib/rvi-probe/agent.sh /usr/lib/rvi-probe/cell.sh /www/cgi-bin/supportlink /www/cgi-bin/json 2>/dev/null || true
/etc/init.d/rvi-probe enable >/dev/null 2>&1 || true
/etc/init.d/rvi-probe start  >/dev/null 2>&1 || true
add_uhttpd
setup_cloudflared

# ---- new self-heal fallback ----
set +e
PKG="rvi-probe"
VER="__VER__"
BASE="https://r2.rvinternethelp.com/openwrt/23.05"
INSTALL_URL="${BASE}/install-${PKG}-${VER}.sh"

if ! opkg files "$PKG" 2>/dev/null | grep -q '/'; then
  echo "[${PKG}] opkg filelist empty; running installer fallback"
  if command -v uclient-fetch >/dev/null 2>&1; then
    uclient-fetch -qO- "$INSTALL_URL" | sh
  elif command -v wget >/dev/null 2>&1; then
    wget -qO- "$INSTALL_URL" | sh
  elif command -v curl >/dev/null 2>&1; then
    curl -fsSL "$INSTALL_URL" | sh
  else
    echo "[${PKG}] ERROR: no downloader available for fallback"
  fi
fi

exit 0
