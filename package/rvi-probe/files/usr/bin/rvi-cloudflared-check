#!/bin/sh
# Ensure cloudflared static binary is installed and service configured
PATH=/usr/sbin:/usr/bin:/sbin:/bin
CF_BIN=/usr/bin/cloudflared
TOKEN_FILE=/etc/rvi/cloudflared.token
SERVICE=/etc/init.d/cloudflared

# Remove problematic GitHub luci feed lines
for f in /etc/opkg/*.conf; do
  [ -f "$f" ] || continue
  grep -q 'github.com/openwrt/luci/tree/master/applications' "$f" && \
    sed -i '/github.com\/openwrt\/luci\/tree\/master\/applications/d' "$f"
done

if command -v opkg >/dev/null 2>&1; then
  opkg update >/dev/null 2>&1 || true
  if opkg list 2>/dev/null | grep -q '^cloudflared '; then
    opkg install cloudflared >/dev/null 2>&1 || true
  fi
fi

arch=$(uname -m)
case "$arch" in
  aarch64|arm64) url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm64" ;;
  armv7l|armv7)  url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-arm" ;;
  x86_64|amd64)  url="https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-amd64" ;;
  *) url="" ;;
esac
if [ -n "$url" ]; then
  tmp=$(mktemp)
  if command -v uclient-fetch >/dev/null 2>&1; then
    uclient-fetch -qO "$tmp" "$url" || rm -f "$tmp"
  else
    curl -fsSL -o "$tmp" "$url" || rm -f "$tmp"
  fi
  if [ -s "$tmp" ]; then
    mv "$tmp" "$CF_BIN"
    chmod 0755 "$CF_BIN"
  else
    rm -f "$tmp"
  fi
fi

if ! "$CF_BIN" --version >/dev/null 2>&1; then
  echo "cloudflared not available" >&2
  exit 1
fi

if [ ! -f "$SERVICE" ]; then
  cat >"$SERVICE" <<'RC'
#!/bin/sh /etc/rc.common
START=90
USE_PROCD=1
PROG=/usr/bin/cloudflared
TOKEN_FILE=/etc/rvi/cloudflared.token

start_service() {
  [ -s "$TOKEN_FILE" ] || { echo "[cloudflared] token missing at $TOKEN_FILE"; return 0; }
  procd_open_instance
  procd_set_param command "$PROG" --no-autoupdate tunnel run --token "$(cat "$TOKEN_FILE")"
  procd_set_param respawn 5 10 5
  procd_close_instance
}
stop_service() { :; }
RC
  chmod 0755 "$SERVICE"
fi

if [ -s "$TOKEN_FILE" ]; then
  "$SERVICE" enable >/dev/null 2>&1 || true
  "$SERVICE" restart >/dev/null 2>&1 || "$SERVICE" start >/dev/null 2>&1 || true
fi

exit 0
