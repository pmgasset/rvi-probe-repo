#!/bin/sh
# JSON status endpoint for SupportLink UI
# Also supports ?action=speedtest and ?action=restart_router (PIN optional but recommended)

set -efu

# ---------- helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\\\/\\\\\\\\/g; s/"/\\"/g'; }
qs_get() { # usage: qs_get key
  key="$1"
  val="$(printf '%s' "${QUERY_STRING:-}" | sed -n "s/.*[?&]$key=\([^&]*\).*/\1/p")"
  printf '%s' "$val" | sed -e 's/+/%20/g' -e 's/%20/ /g' -e 's/%3A/:/ig' -e 's/%2F/\//ig'
}
have() { command -v "$1" >/dev/null 2>&1; }

sha1hex() {
  if have sha1sum; then
    printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then
    printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    # poor-man CRC32 fallback
    awk -v s="$1" 'BEGIN{
      split("0xEDB88320",tmp);
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1)); T[i]=x}
      c=compl(0);
      for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255); c=xor(T[c], rshift(c,8))}
      c=xor(c,compl(0)); printf "%08x", and(c,0xffffffff)
    } function and(a,b){return a&b} function xor(a,b){return xor_(a,b)}
      function xor_(a,b, i,r){r=0;for(i=0;i<32;i++) r+=and(xorbit(a,i),lshift(and(b,1),i)), b=rshift(b,1); return r}
      function lshift(x,n){return x*2^n} function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function compl(x){return -1-x}
    '
  fi
}

mac_addr=''
for IF in br-lan eth0 lan wan wlan0; do
  [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"
  [ -n "${mac_addr:-}" ] && break || true
done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"

uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"

tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"

bucket="$(date +%s | awk '{print int($1/300)}')"
seed="${hostname}:${bucket}:supportlink"
hex="$(sha1hex "$seed" | cut -c1-8)"
code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then
  # quick HEAD to Worker ping if configured (best-effort)
  WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"
  [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"
  curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true
fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

action="$(qs_get action)"

if [ -n "$action" ]; then
  header
  case "$action" in
    speedtest)
      if have speedtest; then
        # Ookla CLI JSON
        if speedtest --format=json --accept-license --accept-gdpr 2>/tmp/stderr_st.json 1>/tmp/stdout_st.json; then
          printf '{"ok":true,"speedtest":%s}' "$(cat /tmp/stdout_st.json)"
        else
          printf '{"ok":false,"error":"speedtest failed","stderr":%s}' "$(printf '%s' "$(cat /tmp/stderr_st.json 2>/dev/null || true)" | jq -Rs . 2>/dev/null || echo "\"\"")"
        fi
      else
        printf '{"ok":false,"error":"missing speedtest","install":"curl -fsSL https://install.speedtest.net/app/cli/install.sh | sh"}'
      fi
      ;;
    restart_router)
      # Optional PIN check
      pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then
        printf '{"ok":false,"error":"bad pin"}'
      else
        (sleep 1; /sbin/reboot) >/dev/null 2>&1 &
        printf '{"ok":true}'
      fi
      ;;
    *)
      printf '{"ok":false,"error":"unknown action"}'
      ;;
  esac
  exit 0
fi

# default: status JSON
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
