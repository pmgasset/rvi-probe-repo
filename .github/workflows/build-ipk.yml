name: Build rvi-probe IPK (fast, no SDK)

on:
  push:
    branches: [ main ]
    paths:
      - 'package/**'
      - '.github/workflows/build-ipk.yml'
      - 'scripts/**'
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      OWRT_VER: "23.05.3"
      PKG_NAME: "rvi-probe"
      PKG_VERSION: "0.5.0-1"
      PKG_ARCH: "all"
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install minimal build tools
        run: |
          set -euxo pipefail
          sudo apt-get update
          # binutils provides `ar`; coreutils for md5sum/sha256sum; fakeroot for tar ownership
          sudo apt-get install -y binutils coreutils fakeroot tar gzip findutils unzip curl

      - name: Fetch OpenWrt opkg-make-index script (from release tarball)
        run: |
          set -euxo pipefail
          curl -fsSL "https://codeload.github.com/openwrt/openwrt/tar.gz/refs/tags/v${OWRT_VER}" -o openwrt.tar.gz
          mkdir -p tools/opkg
          # Extract index script directly (no tar | head pipeline)
          tar -xzf openwrt.tar.gz --wildcards --to-stdout 'openwrt-*/scripts/ipkg-make-index.sh' > tools/opkg/opkg-make-index
          chmod +x tools/opkg/opkg-make-index

      - name: Assemble package root
        run: |
          set -euxo pipefail
          SRC="package/${PKG_NAME}/files"
          PKG="dist/pkg"
          test -d "$SRC" || { echo "Missing $SRC"; exit 1; }
          mkdir -p "$PKG"
          cp -a "$SRC"/. "$PKG"/

          # CONTROL/control (OpenWrt style)
          mkdir -p "$PKG/CONTROL"
          printf '%s\n' \
            "Package: ${PKG_NAME}" \
            "Version: ${PKG_VERSION}" \
            "Architecture: ${PKG_ARCH}" \
            "Maintainer: RVInternetHelp <support@rvinternethelp.com>" \
            "Section: utils" \
            "Priority: optional" \
            "Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util" \
            "Source: local" \
            "Description: RVInternetHelp Network Probe (SupportLink UI, JSON status, cell metrics, speed tests). Post-install auto-configures loopback uHTTPd and (if present) cloudflared." \
            > "$PKG/CONTROL/control"

          # CONTROL scripts must be executable if present
          if [ -d "$PKG/CONTROL" ]; then
            chmod 0755 "$PKG/CONTROL/"* || true
          fi

      - name: Build .ipk manually (ar + tar)
        run: |
          set -euxo pipefail
          OUT="dist/repo"
          WORK="dist/work"
          PKG="dist/pkg"
          mkdir -p "$OUT" "$WORK"

          # Required files for .ipk (Debian ar archive): debian-binary, control.tar.gz, data.tar.gz
          echo "2.0" > "${WORK}/debian-binary"

          # control.tar.gz (contents of CONTROL/*)
          fakeroot bash -c 'cd dist/pkg/CONTROL && tar -czf ../../work/control.tar.gz --owner=0 --group=0 .'

          # data.tar.gz (everything under pkg root except CONTROL)
          fakeroot bash -c '
            cd dist/pkg
            # list top-level items excluding CONTROL
            SHIP=$(find . -mindepth 1 -maxdepth 1 ! -name CONTROL -printf "%P\n")
            [ -n "$SHIP" ] || { echo "No payload files to package"; exit 1; }
            tar -czf ../work/data.tar.gz --owner=0 --group=0 $SHIP
          '

          # compose final .ipk
          IPK="${OUT}/${PKG_NAME}_${PKG_VERSION}_${PKG_ARCH}.ipk"
          ar -cr "$IPK" "${WORK}/debian-binary" "${WORK}/control.tar.gz" "${WORK}/data.tar.gz"
          ls -l "$OUT"

      - name: Generate opkg index
        run: |
          set -euxo pipefail
          cd dist/repo
          ../../tools/opkg/opkg-make-index . > Packages
          gzip -9kf Packages
          test -s Packages && test -s Packages.gz
          ls -l

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: rvi-probe-ipk
          path: dist/repo/*

  publish:
    needs: build
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    env:
      SIGNING_ENABLED: ${{ vars.SIGNING_ENABLED }}
    steps:
      - uses: actions/checkout@v4

      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: rvi-probe-ipk
          path: dist/repo

      - name: Install awscli v2 & usign
        run: |
          set -euxo pipefail
          sudo apt-get update
          sudo apt-get install -y unzip usign
          curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip -q awscliv2.zip
          sudo ./aws/install --update
          aws --version

      - name: Sign Packages index (optional)
        if: env.SIGNING_ENABLED == '1'
        env:
          USIGN_PRIVATE_KEY_BASE64: ${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}
        run: |
          set -euxo pipefail
          mkdir -p package-signing
          echo "$USIGN_PRIVATE_KEY_BASE64" | base64 -d > package-signing/usign-private.key
          chmod 600 package-signing/usign-private.key
          cd dist/repo
          usign -S -m Packages -s ../../package-signing/usign-private.key -x Packages.sig
          ls -l

      - name: Publish to Cloudflare R2
        env:
          R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
          R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
          R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
          R2_BUCKET: ${{ secrets.R2_BUCKET }}
          R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
        run: |
          set -euxo pipefail
          ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
          aws configure set aws_access_key_id "$R2_ACCESS_KEY_ID"
          aws configure set aws_secret_access_key "$R2_SECRET_ACCESS_KEY"

          # Upload repo (ipk + Packages + Packages.gz [+ Packages.sig if present])
          aws s3 cp dist/repo "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --recursive --acl public-read --content-type application/octet-stream

          # Ensure correct content-type for Packages.gz
          if [ -f dist/repo/Packages.gz ]; then
            aws s3 cp dist/repo/Packages.gz "s3://${R2_BUCKET}/openwrt/23.05/Packages.gz" \
              --endpoint-url "$ENDPOINT" --acl public-read --content-type application/gzip --metadata-directive REPLACE
          fi

          echo "Published to: ${R2_PUBLIC_BASE}/openwrt/23.05/"