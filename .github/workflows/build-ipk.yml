name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y binutils coreutils fakeroot tar gzip findutils curl unzip

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Download OpenWrt ipkg-make-index.sh
      run: |
        set -euxo pipefail
        curl -fsSL "https://codeload.github.com/openwrt/openwrt/tar.gz/v23.05.3" | tar -xz --to-stdout "openwrt-23.05.3/scripts/ipkg-make-index.sh" > ipkg-make-index.sh
        chmod +x ipkg-make-index.sh
        test -s ipkg-make-index.sh

    - name: Create checksum shims
      run: |
        set -euxo pipefail
        mkdir -p shims
        cat > shims/sha256 << 'EOF'
        #!/bin/bash
        exec sha256sum "$@"
        EOF
        cat > shims/md5 << 'EOF'
        #!/bin/bash
        exec md5sum "$@"
        EOF
        chmod +x shims/sha256 shims/md5
        export PATH="$PWD/shims:$PATH"
        echo "PATH=$PWD/shims:$PATH" >> $GITHUB_ENV

    - name: Build IPK package
      run: |
        set -euxo pipefail
        mkdir -p dist/repo dist/pkg/CONTROL dist/payload
        
        # Create control file with proper formatting
        cat > dist/pkg/CONTROL/control << 'EOF'
        Package: rvi-probe
        Version: 0.5.0-1
        Architecture: all
        Maintainer: RVInternetHelp <support@rvinternethelp.com>
        Section: net
        Priority: optional
        Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util
        Description: RVInternetHelp Network Probe
         Support/diagnostics agent with outage checks, speed tests,
         Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.
        EOF
        
        # Verify control file
        test -s dist/pkg/CONTROL/control
        echo "Control file contents:"
        cat dist/pkg/CONTROL/control
        
        # Copy package files, excluding CONTROL directory
        rsync -av --exclude='CONTROL' package/rvi-probe/files/ dist/payload/
        
        # Set proper permissions
        find dist/payload -type f -name "*.sh" -exec chmod 755 {} \;
        find dist/payload -path "*/bin/*" -type f -exec chmod 755 {} \;
        find dist/payload -path "*/init.d/*" -type f -exec chmod 755 {} \;
        find dist/payload -path "*/cgi-bin/*" -type f -exec chmod 755 {} \;
        find dist/payload -path "*/lib/*" -name "*.sh" -exec chmod 755 {} \;
        
        cd dist/pkg
        
        # Create debian-binary
        echo "2.0" > debian-binary
        test -s debian-binary
        
        # Create control archive
        cd CONTROL
        tar --owner=0 --group=0 --numeric-owner -czf ../control.tar.gz .
        cd ..
        test -s control.tar.gz
        
        # Create data archive
        cd ../payload
        tar --owner=0 --group=0 --numeric-owner -czf ../pkg/data.tar.gz .
        cd ../pkg
        test -s data.tar.gz
        
        # Create IPK using ar in correct order
        ar rcD rvi-probe_0.5.0-1_all.ipk debian-binary control.tar.gz data.tar.gz
        
        # Verify IPK was created and has content
        test -s rvi-probe_0.5.0-1_all.ipk
        ls -la rvi-probe_0.5.0-1_all.ipk
        
        # Verify IPK structure
        ar -t rvi-probe_0.5.0-1_all.ipk
        
        # Move to repo directory
        mv rvi-probe_0.5.0-1_all.ipk ../repo/
        echo "IPK package built successfully"

    - name: Generate package index
      run: |
        set -euxo pipefail
        cd dist/repo
        
        # Verify IPK exists and is readable
        test -s rvi-probe_0.5.0-1_all.ipk
        file rvi-probe_0.5.0-1_all.ipk
        
        # Test extracting control from IPK to verify it's valid
        echo "Testing IPK extraction..."
        ar -p rvi-probe_0.5.0-1_all.ipk control.tar.gz | tar -tzf - | head -5
        
        # Generate index using OpenWrt script
        echo "Generating package index..."
        ../../ipkg-make-index.sh . > Packages
        test -s Packages
        
        # Show first few lines of generated index
        echo "Generated Packages file (first 20 lines):"
        head -20 Packages
        
        # Create compressed version
        gzip -fk9 Packages
        test -s Packages.gz
        
        # Verify package is in index
        if grep -q "Package: rvi-probe" Packages; then
          echo "✅ rvi-probe found in index"
        else
          echo "❌ rvi-probe not found in index"
          cat Packages
          exit 1
        fi
        
        echo "Package index generated successfully"

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          # Install usign dependencies
          sudo apt-get install -y libbsd-dev build-essential cmake
          
          # Download and build usign
          curl -fsSL "https://codeload.github.com/openwrt/usign/tar.gz/master" | tar -xz
          cd usign-master
          cmake .
          make
          sudo make install
          cd ..
          
          # Decode private key
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          # Sign the Packages file
          cd dist/repo
          if usign -S -m Packages -s ../../signing.key -x Packages.sig 2>/dev/null; then
            test -s Packages.sig
            echo "✅ Packages signed successfully"
          else
            echo "⚠️  Signing failed, continuing without signature"
          fi
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
      run: |
        set -euxo pipefail
        cd dist/repo
        
        ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
        
        # Upload IPK package
        aws s3 cp rvi-probe_0.5.0-1_all.ipk \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/octet-stream"
        
        # Upload Packages index
        aws s3 cp Packages \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "text/plain"
        
        # Upload Packages.gz with proper content type
        aws s3 cp Packages.gz \
          "s3://${R2_BUCKET}/openwrt/23.05/all/" \
          --endpoint-url "$ENDPOINT" \
          --acl public-read \
          --content-type "application/gzip" \
          --metadata-directive REPLACE
        
        # Upload signature if it exists
        if [ -f Packages.sig ]; then
          aws s3 cp Packages.sig \
            "s3://${R2_BUCKET}/openwrt/23.05/all/" \
            --endpoint-url "$ENDPOINT" \
            --acl public-read \
            --content-type "application/octet-stream"
        fi
        
        echo "Upload completed successfully"

    - name: Verify upload
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        # Wait for R2 consistency
        sleep 5
        
        # Verify uploaded files are accessible
        echo "Verifying uploaded files..."
        curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" | head -10
        
        # Check IPK checksum
        LOCAL_MD5=$(md5sum dist/repo/rvi-probe_0.5.0-1_all.ipk | cut -d' ' -f1)
        REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/rvi-probe_0.5.0-1_all.ipk" | md5sum | cut -d' ' -f1)
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Checksums match - upload successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi