#!/bin/sh
# SupportLink: status JSON + speedtest
# - Uses R2-hosted librespeed-cli (auto-install on first use)
# - Optional manifest-based SHA256 verification
# - Cloudflare-only server: https://speed.cloudflare.com
# - Ookla CLI used only if already present
# - Robust query parsing (first param OK)
# - Emits exactly one JSON response

set -efu

# ---------- headers / helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g'; }
have() { command -v "$1" >/dev/null 2>&1; }

# URL decode (+ -> space, %XX)
urldecode(){ local s="${1//+/ }"; printf '%b' "${s//%/\\x}"; }

# robust: handles first param and later ones
qs_get(){
  local key="$1" qs="&${QUERY_STRING:-}&" raw
  raw="$(printf '%s' "$qs" | sed -n "s/.*[&]$key=\([^&]*\).*/\1/p" | head -n1)"
  [ -n "$raw" ] && urldecode "$raw" || printf ''
}

sha1hex() {
  if have sha1sum; then printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    awk -v s="$1" 'BEGIN{
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1));T[i]=x}
      c=compl(0);for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255);c=xor(T[c],rshift(c,8))}c=xor(c,compl(0));printf "%08x",and(c,0xffffffff)
    } function and(a,b){return a&b} function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function xor(a,b, i,r){r=0;for(i=0;i<32;i++){r+=and((and(a,1)^and(b,1)),2^i);a=rshift(a,1);b=rshift(b,1)};return r}
      function compl(x){return -1-x}'
  fi
}

emit_error(){ # usage: emit_error "msg" [install_hint] [debug]
  header
  printf '{'
  printf '"ok":false,"error":"%s"' "$(json_escape "$1")"
  [ -n "${2:-}" ] && printf ',"install":"%s"' "$(json_escape "$2")"
  [ -n "${3:-}" ] && printf ',"debug":"%s"'   "$(json_escape "$3")"
  printf '}\n'
}

# ---------- device identity / status ----------
mac_addr=''
for IF in br-lan eth0 lan wan wlan0; do
  [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"
  [ -n "${mac_addr:-}" ] && break || true
done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"

uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"
tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"

bucket="$(date +%s | awk '{print int($1/300)}')"
seed="${hostname}:${bucket}:supportlink"
hex="$(sha1hex "$seed" | cut -c1-8)"
code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then
  WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"; [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"
  curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true
fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

# ---------- R2 configuration ----------
# Preferred: manifest JSON mapping arch -> {url, sha256}
LS_MANIFEST="$(uci -q get rviprobe.config.ls_manifest || true)"   # e.g. https://r2.yourdomain.com/librespeed/manifest.json
# Fallback: template base (we will append /librespeed-cli-<arch> ), optional sha256 per-arch
LS_BASE="$(uci -q get rviprobe.config.ls_base || true)"           # e.g. https://r2.yourdomain.com/librespeed
# Optional: explicit per-arch checksum keys (e.g., ls_sha256_arm64, ls_sha256_amd64, ...)
# uci set rviprobe.config.ls_sha256_arm64='abc123...'

# ---------- arch detection / manifest helpers ----------
detect_arch(){
  case "$(uname -m)" in
    x86_64|amd64)  echo amd64 ;;
    aarch64|arm64) echo arm64 ;;
    armv7l|armv7)  echo armv7 ;;
    armv6l|armv6)  echo armv6 ;;
    i686|i386)     echo 386 ;;
    mipsel|mipsle) echo mipsle ;;
    mips)          echo mips ;;
    *)             echo unknown ;;
  esac
}

fetch(){
  # usage: fetch URL OUTFILE
  local url="$1" out="$2"
  if have curl; then curl -fsSL "$url" -o "$out"
  elif have wget; then wget -q -O "$out" "$url"
  else return 1; fi
}

sha256_of(){
  if have sha256sum; then sha256sum "$1" | awk '{print $1}'
  elif have openssl; then openssl dgst -sha256 "$1" | awk '{print $2}'
  else echo ""; fi
}

json_field(){ # tiny extractor for one-level JSON: json_field key < file
  sed -n "s/.*\"$1\"[[:space:]]*:[[:space:]]*\"\\([^\"]*\\)\".*/\\1/p" "$2" | head -n1
}

manifest_get(){
  # set globals: M_URL M_SHA if found; return 0/1
  local arch="$1" tmp="/tmp/ls_manifest.$$"
  M_URL=""; M_SHA=""
  [ -z "$LS_MANIFEST" ] && return 1
  fetch "$LS_MANIFEST" "$tmp" || { rm -f "$tmp"; return 1; }
  # Try object of objects: { "arm64": {"url":"...","sha256":"..."} }
  M_URL="$(sed -n "/\"$arch\"[[:space:]]*:/,/{/\"url\"/p}" "$tmp" | sed -n 's/.*"url"[[:space:]]*:[[:space:]]*"\([^"\]*\)".*/\1/p' | head -n1)"
  M_SHA="$(sed -n "/\"$arch\"[[:space:]]*:/,/{/\"sha256\"/p}" "$tmp" | sed -n 's/.*"sha256"[[:space:]]*:[[:space:]]*"\([^"\]*\)".*/\1/p' | head -n1)"
  if [ -z "$M_URL" ]; then
    # Try flat map: { "arm64":"url", "sha256_arm64":"abc..." }
    M_URL="$(json_field "$arch" "$tmp")"
    M_SHA="$(json_field "sha256_$arch" "$tmp")"
  fi
  rm -f "$tmp"
  [ -n "$M_URL" ] && return 0 || return 1
}

install_librespeed_from_r2(){
  # already present?
  command -v librespeed-cli >/dev/null 2>&1 && { LS_DBG="already_installed"; return 0; }

  local arch url sha exp_sha tmp="/tmp/librespeed.$$"
  arch="$(detect_arch)"
  [ "$arch" = "unknown" ] && { LS_DBG="unknown_arch"; return 1; }

  if manifest_get "$arch"; then
    url="$M_URL"; exp_sha="$M_SHA"; LS_DBG="manifest:$LS_MANIFEST arch=$arch"
  elif [ -n "$LS_BASE" ]; then
    url="${LS_BASE%/}/librespeed-cli-${arch}"
    exp_sha="$(uci -q get rviprobe.config.ls_sha256_${arch} || true)"
    LS_DBG="template:$LS_BASE arch=$arch"
  else
    LS_DBG="no_manifest_or_base"; return 1
  fi

  # download
  if ! fetch "$url" "$tmp"; then LS_DBG="$LS_DBG; fetch_failed"; return 1; fi

  # checksum if provided
  if [ -n "$exp_sha" ]; then
    got_sha="$(sha256_of "$tmp")"
    if [ -z "$got_sha" ] || [ "$got_sha" != "$exp_sha" ]; then
      LS_DBG="$LS_DBG; sha_mismatch got=${got_sha:-none}"
      rm -f "$tmp"
      return 1
    fi
  fi

  # install
  chmod +x "$tmp" 2>/dev/null || true
  mv "$tmp" /usr/bin/librespeed-cli 2>/dev/null || cp "$tmp" /usr/bin/librespeed-cli
  chmod +x /usr/bin/librespeed-cli
  LS_DBG="$LS_DBG; installed=/usr/bin/librespeed-cli"
  return 0
}

# ---------- run Cloudflare test ----------
CF_URL="https://speed.cloudflare.com"

run_cmd_json(){ # usage: run_cmd_json "cmd"
  local CMD="$1" OUT="/tmp/st_out.$$" ERR="/tmp/st_err.$$"
  sh -c "$CMD" 1>"$OUT" 2>"$ERR" || true
  if grep -q '{' "$OUT" 2>/dev/null; then cat "$OUT"; rm -f "$OUT" "$ERR"; return 0; fi
  DBG="$(cat "$ERR" 2>/dev/null || true)"; rm -f "$OUT" "$ERR"; printf '%s' "$DBG"; return 1
}

normalize_ls_json(){ # â†’ {"ping":ms,"download":{"bandwidth":bps},"upload":{"bandwidth":bps}}
  local ST="$1" ping dmb umb dB dT uB uT down_bps up_bps
  ping="$(printf '%s' "$ST" | sed -n 's/.*"ping"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  dmb="$(printf '%s' "$ST" | sed -n 's/.*"download"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  umb="$(printf '%s' "$ST" | sed -n 's/.*"upload"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p' | head -n1)"
  dB="$(printf '%s' "$ST" | sed -n 's/.*"downloadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  dT="$(printf '%s' "$ST" | sed -n 's/.*"downloadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  uB="$(printf '%s' "$ST" | sed -n 's/.*"uploadBytes"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  uT="$(printf '%s' "$ST" | sed -n 's/.*"uploadElapsed"[[:space:]]*:[[:space:]]*\([0-9][0-9]*\).*/\1/p' | head -n1)"
  if [ -n "$dmb" ]; then down_bps="$(awk -v M="$dmb" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "$dB" ] && [ -n "$dT" ] && [ "$dT" -gt 0 ]; then down_bps="$(awk -v B="$dB" -v MS="$dT" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else down_bps=0; fi
  if [ -n "$umb" ]; then up_bps="$(awk -v M="$umb" 'BEGIN{printf "%.0f", M*1000000}')"
  elif [ -n "$uB" ] && [ -n "$uT" ] && [ "$uT" -gt 0 ]; then up_bps="$(awk -v B="$uB" -v MS="$uT" 'BEGIN{printf "%.0f", (B*8)/(MS/1000.0)}')"; else up_bps=0; fi
  [ -z "$ping" ] && ping=0
  printf '{"ping":%s,"download":{"bandwidth":%s},"upload":{"bandwidth":%s}}' "$ping" "$down_bps" "$up_bps"
}

run_librespeed_cloudflare(){
  local JSON TRIED=""
  if command -v librespeed-cli >/dev/null 2>&1; then
    for F in "--server" "--url" "--host" ""; do
      [ -n "$F" ] && TRIED="$TRIED;librespeed-cli --json $F $CF_URL" || TRIED="$TRIED;librespeed-cli --json"
      JSON="$(run_cmd_json "librespeed-cli --json $F $CF_URL")" && { NORM="$(normalize_ls_json "$JSON")"; ENGINE="librespeed-cli"; TRIED="${TRIED#;}"; return 0; }
    done
  fi
  TRIED="${TRIED#;}"
  return 1
}

# ---------- Ookla fallback (only if already present) ----------
run_ookla_if_present(){
  if command -v speedtest >/dev/null 2>&1; then
    local OUT="/tmp/stdout_st.json" ERR="/tmp/stderr_st.json"
    if speedtest --format=json --accept-license --accept-gdpr 1>"$OUT" 2>"$ERR"; then
      header; printf '{"ok":true,"engine":"ookla","speedtest":%s}\n' "$(cat "$OUT")"; rm -f "$OUT" "$ERR"; return 0
    fi
  fi
  return 1
}

# ---------- routing ----------
action="$(qs_get action)"

if [ -n "$action" ]; then
  case "$action" in
    speedtest)
      # try; if missing, auto-install from R2 and retry once
      if run_librespeed_cloudflare; then
        header
        printf '{"ok":true,"engine":"%s","server":"%s","speedtest":%s,"raw":%s' "$ENGINE" "$CF_URL" "$NORM" "$(printf '%s' "$JSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
        [ -n "$(qs_get debug)" ] && printf ',"debug":"tried=%s"' "$(json_escape "$TRIED")"
        printf '}\n'
        exit 0
      fi
      if install_librespeed_from_r2 && run_librespeed_cloudflare; then
        header
        printf '{"ok":true,"engine":"%s","server":"%s","speedtest":%s,"raw":%s' "$ENGINE" "$CF_URL" "$NORM" "$(printf '%s' "$JSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
        [ -n "$(qs_get debug)" ] && printf ',"debug":"installed_from_r2; %s"' "$(json_escape "${LS_DBG}; tried=${TRIED}")"
        printf '}\n'
        exit 0
      fi
      # final fallback if the device already has Ookla
      if run_ookla_if_present; then exit 0; fi
      emit_error "no speedtest client available" "set UCI rviprobe.config.ls_manifest or ls_base to your R2; then retry" "${LS_DBG:-not_installed}"
      exit 0
      ;;
    restart_router)
      header
      pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then printf '{"ok":false,"error":"bad pin"}\n'
      else (sleep 1; /sbin/reboot) >/dev/null 2>&1 & printf '{"ok":true}\n'
      fi
      exit 0
      ;;
    *)
      emit_error "unknown action"; exit 0 ;;
  esac
fi

# ---------- default: status JSON ----------
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
