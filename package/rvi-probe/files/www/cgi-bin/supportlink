#!/bin/sh
# SupportLink: status JSON + speedtest (LibreSpeed preferred, auto-install via opkg; Ookla fallback)
# POSIX sh / BusyBox safe.

set -efu

# ---------- headers / helpers ----------
header() { printf 'Content-Type: application/json\r\nCache-Control: no-store\r\n\r\n'; }
json_escape() { printf '%s' "$1" | sed 's/\\/\\\\/g; s/"/\\"/g'; }
qs_get() { # usage: qs_get key
  key="$1"
  val="$(printf '%s' "${QUERY_STRING:-}" | sed -n "s/.*[?&]$key=\([^&]*\).*/\1/p")"
  printf '%s' "$val" | sed -e 's/+/%20/g' -e 's/%20/ /g' -e 's/%3A/:/ig' -e 's/%2F/\//ig'
}
have() { command -v "$1" >/dev/null 2>&1; }

sha1hex() {
  if have sha1sum; then
    printf '%s' "$1" | sha1sum | awk '{print $1}'
  elif have openssl; then
    printf '%s' "$1" | openssl dgst -sha1 -r | awk '{print $1}'
  else
    # simple CRC32 fallback (not cryptographic; used only to keep 6-digit rotation stable)
    awk -v s="$1" 'BEGIN{
      for(i=0;i<256;i++){x=i;for(k=0;k<8;k++) x=(and(x,1)?xor(0xEDB88320, rshift(x,1)):rshift(x,1)); T[i]=x}
      c=compl(0);
      for(i=1;i<=length(s);i++){c=and(xor(c,ord(substr(s,i,1))),255); c=xor(T[c], rshift(c,8))}
      c=xor(c,compl(0)); printf "%08x", and(c,0xffffffff)
    } function and(a,b){return a&b}
      function rshift(x,n){return int(x/2^n)}
      function ord(c){return index("\0\1\2\3\4\5\6\7\b\t\n\13\14\15\16\17\20\21\22\23\24\25\26\27\30\31 !\"#$%&'\''()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~",c)}
      function xor(a,b, i,r){r=0;for(i=0;i<32;i++){r+=and((and(a,1)^and(b,1)),2^i);a=rshift(a,1);b=rshift(b,1)};return r}
      function compl(x){return -1-x}
    '
  fi
}

# ---------- device identity / status ----------
mac_addr=''
for IF in br-lan eth0 lan wan wlan0; do
  [ -e "/sys/class/net/$IF/address" ] && mac_addr="$(cat "/sys/class/net/$IF/address" 2>/dev/null || true)"
  [ -n "${mac_addr:-}" ] && break || true
done
[ -z "${mac_addr:-}" ] && mac_addr="$(ip link 2>/dev/null | awk '/link\\/ether/{print $2; exit}')"
did="$(printf '%s' "${mac_addr:-unknown}" | tr -d ':' | tr 'A-Z' 'a-z')"
hostname="${did}.nomadconnect.app"

uptime="$(cut -d. -f1 /proc/uptime 2>/dev/null || echo 0)"
tstate="down"; pgrep -f cloudflared >/dev/null 2>&1 && tstate="active"

bucket="$(date +%s | awk '{print int($1/300)}')"
seed="${hostname}:${bucket}:supportlink"
hex="$(sha1hex "$seed" | cut -c1-8)"
code="$(printf '%d\n' "0x${hex:-0}" | awk '{printf "%06d", ($1 % 1000000)}')"

inet="unknown"
if have curl; then
  WORKER_URL="$(uci -q get rviprobe.config.worker_url || true)"
  [ -z "${WORKER_URL:-}" ] && WORKER_URL="https://status-hunter.traveldata.workers.dev"
  curl -fsSL "${WORKER_URL%/}/ping" >/dev/null 2>&1 && inet="cell" || true
fi
[ "$inet" = "unknown" ] && ping -c1 -W1 1.1.1.1 >/dev/null 2>&1 && inet="cell" || inet="$inet"

# ---------- LibreSpeed installer + runner ----------
try_install_librespeed() {
  # Try a few package names seen across OpenWrt feeds.
  # Return 0 if installed, 1 otherwise. Set INSTALL_HINT var with the command tried.
  INSTALL_HINT=''
  have opkg || return 1
  opkg update >/dev/null 2>&1 || true
  for PKG in librespeed-cli librespeed-go speedtest-go; do
    INSTALL_HINT="opkg install $PKG"
    opkg --force-overwrite install "$PKG" >/dev/null 2>&1 && return 0 || true
  done
  return 1
}

run_librespeed_json() {
  # Echo JSON on stdout, or empty if not available.
  if have librespeed-cli; then
    librespeed-cli --json 2>/dev/null || true
  elif have speedtest-go; then
    speedtest-go --json 2>/dev/null || true
  elif have librespeed; then
    librespeed --json 2>/dev/null || true
  else
    printf ''
  fi
}

num_from_json() {  # usage: num_from_json KEY JSON
  KEY="$1"; J="$2"
  printf '%s' "$J" | sed -n "s/.*\"$KEY\"[[:space:]]*:[[:space:]]*\([0-9][0-9.]*\).*/\1/p" | head -n1
}

calc_bps_from_bytes_ms() { # BYTES, MS
  awk -v B="$1" -v MS="$2" 'BEGIN{ if(MS<=0){print 0}else{ printf "%.0f", (B*8)/(MS/1000.0) }}'
}

speedtest_librespeed() {
  STJSON="$(run_librespeed_json)"
  if [ -z "${STJSON:-}" ]; then
    # attempt install and retry once
    if try_install_librespeed; then
      STJSON="$(run_librespeed_json)"
    fi
  fi
  [ -z "${STJSON:-}" ] && return 1

  # Try to normalize -> ping (ms), download/upload bandwidth (bps)
  ping="$(num_from_json ping "$STJSON")"
  # Common LibreSpeed fields:
  # - download / upload in Mbps
  # - or downloadBytes/uploadBytes with elapsed ms
  down_mbps="$(num_from_json download "$STJSON")"
  up_mbps="$(num_from_json upload "$STJSON")"
  down_bps=''
  up_bps=''

  if [ -n "${down_mbps:-}" ]; then
    down_bps="$(awk -v M="$down_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
  else
    dbytes="$(num_from_json downloadBytes "$STJSON")"
    delap="$(num_from_json downloadElapsed "$STJSON")" # ms
    [ -n "${dbytes:-}" ] && [ -n "${delap:-}" ] && down_bps="$(calc_bps_from_bytes_ms "$dbytes" "$delap")" || true
  fi

  if [ -n "${up_mbps:-}" ]; then
    up_bps="$(awk -v M="$up_mbps" 'BEGIN{printf "%.0f", M*1000000}')"
  else
    ubytes="$(num_from_json uploadBytes "$STJSON")"
    uelap="$(num_from_json uploadElapsed "$STJSON")" # ms
    [ -n "${ubytes:-}" ] && [ -n "${uelap:-}" ] && up_bps="$(calc_bps_from_bytes_ms "$ubytes" "$uelap")" || true
  fi

  [ -z "${down_bps:-}" ] && down_bps=0
  [ -z "${up_bps:-}" ] && up_bps=0
  [ -z "${ping:-}" ] && ping=0

  header
  printf '{'
  printf '"ok":true,"engine":"librespeed",'
  printf '"speedtest":{"ping":%s,"download":{"bandwidth":%s},"upload":{"bandwidth":%s}},' "$ping" "$down_bps" "$up_bps"
  printf '"raw":%s' "$(printf '%s' "$STJSON" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
  printf '}\n'
  return 0
}
# ---------- Ookla fallback ----------
speedtest_ookla() {
  if have speedtest; then
    if speedtest --format=json --accept-license --accept-gdpr 2>/tmp/stderr_st.json 1>/tmp/stdout_st.json; then
      header
      printf '{"ok":true,"engine":"ookla","speedtest":%s}\n' "$(cat /tmp/stdout_st.json)"
    else
      header
      printf '{"ok":false,"error":"ookla speedtest failed","stderr":%s}\n' "$(printf '%s' "$(cat /tmp/stderr_st.json 2>/dev/null || true)" | sed 's/\\/\\\\/g; s/"/\\"/g; s/.*/"&"/')"
    fi
  else
    header
    printf '{"ok":false,"error":"no speedtest engine available",'
    if [ -n "${INSTALL_HINT:-}" ]; then
      printf '"install":"%s"}\n' "$(json_escape "opkg update && $INSTALL_HINT")"
    else
      printf '"install":"opkg update && opkg install librespeed-cli (or speedtest-go)"}\n'
    fi
  fi
}

# ---------- routing ----------
action="$(qs_get action)"

if [ -n "$action" ]; then
  case "$action" in
    speedtest)
      # Prefer LibreSpeed (auto-install on demand), then fall back to Ookla.
      if speedtest_librespeed; then
        exit 0
      else
        speedtest_ookla
        exit 0
      fi
      ;;
    restart_router)
      header
      pin="$(qs_get pin)"
      if [ -n "$pin" ] && [ "$pin" != "$code" ]; then
        printf '{"ok":false,"error":"bad pin"}\n'
      else
        (sleep 1; /sbin/reboot) >/dev/null 2>&1 &
        printf '{"ok":true}\n'
      fi
      exit 0
      ;;
    *)
      header; printf '{"ok":false,"error":"unknown action"}\n'; exit 0 ;;
  esac
fi

# ---------- default: status JSON ----------
header
printf '{'
printf '"internet":"%s","uptime":%s,' "$(json_escape "$inet")" "$uptime"
printf '"tunnel":{"state":"%s","hostname":"%s","id":"%s","code":"%s"}' \
  "$(json_escape "$tstate")" "$(json_escape "$hostname")" "$(json_escape "$did")" "$(json_escape "$code")"
printf '}\n'
