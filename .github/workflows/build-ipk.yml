name: Build OpenWrt IPK Package

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-ipk:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        set -euxo pipefail
        sudo apt-get update
        sudo apt-get install -y build-essential libncurses-dev zlib1g-dev gawk git gettext libssl-dev xsltproc rsync wget unzip python3 curl

    - name: Install AWS CLI v2
      run: |
        set -euxo pipefail
        curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
        unzip -q awscliv2.zip
        sudo ./aws/install --update
        aws --version

    - name: Download OpenWrt SDK
      run: |
        set -euxo pipefail
        SDK_URL="https://downloads.openwrt.org/releases/23.05.3/targets/x86/64/openwrt-sdk-23.05.3-x86-64_gcc-12.3.0_musl.Linux-x86_64.tar.xz"
        
        echo "Downloading OpenWrt SDK..."
        wget -q "$SDK_URL" -O sdk.tar.xz
        
        echo "Extracting SDK..."
        tar -xf sdk.tar.xz
        mv openwrt-sdk-* openwrt-sdk
        
        echo "SDK ready"

    - name: Build package using existing script
      run: |
        set -euxo pipefail
        
        SDK_DIR="$(pwd)/openwrt-sdk"
        ARCH="x86_64"
        
        cd "$SDK_DIR"
        
        # Copy package into SDK
        mkdir -p package/utils/rvi-probe
        rsync -a --delete "$(pwd)/../package/rvi-probe/" package/utils/rvi-probe/
        
        # Verify the package has PKGARCH=all
        echo "Package Makefile PKGARCH setting:"
        grep PKGARCH package/utils/rvi-probe/Makefile || echo "PKGARCH not found"
        
        # Update and install feeds
        ./scripts/feeds update -a
        ./scripts/feeds install -a
        
        # Build configuration
        make defconfig
        
        # Build the package
        make package/rvi-probe/compile V=s
        
        echo "Build complete. Generated packages:"
        find bin/packages -name "*.ipk" -type f

    - name: Create ISOLATED package index
      run: |
        set -euxo pipefail
        cd openwrt-sdk
        
        # Find ONLY rvi-probe packages - be very specific
        PACKAGES_DIR=$(find bin/packages -name "*rvi-probe*.ipk" -exec dirname {} \; | head -1)
        if [ -z "$PACKAGES_DIR" ]; then
          echo "ERROR: No rvi-probe package found"
          exit 1
        fi
        
        echo "Found packages in: $PACKAGES_DIR"
        cd "$PACKAGES_DIR"
        
        # Create isolated upload directory
        mkdir -p ../../../upload/all
        
        # CRITICAL: Process ONLY rvi-probe packages
        RVI_PACKAGES=$(ls *rvi-probe*.ipk 2>/dev/null || echo "")
        if [ -z "$RVI_PACKAGES" ]; then
          echo "ERROR: No rvi-probe packages found"
          exit 1
        fi
        
        echo "Processing rvi-probe packages: $RVI_PACKAGES"
        
        # Initialize empty Packages file
        > "../../../upload/all/Packages"
        
        # Process ONLY rvi-probe packages
        for ipk in $RVI_PACKAGES; do
          echo "Processing: $ipk"
          
          # Store absolute paths before any directory changes
          CURRENT_DIR="$(pwd)"
          IPK_FILE="$CURRENT_DIR/$ipk"
          UPLOAD_DIR="$CURRENT_DIR/../../../upload/all"
          PACKAGES_FILE="$UPLOAD_DIR/Packages"
          
          # Rename to 'all' architecture
          new_name=$(echo "$ipk" | sed 's/_[^_]*\.ipk$/_all.ipk/')
          cp "$ipk" "$UPLOAD_DIR/$new_name"
          
          # Get file metadata
          SIZE=$(stat -c%s "$UPLOAD_DIR/$new_name")
          MD5=$(md5sum "$UPLOAD_DIR/$new_name" | cut -d' ' -f1)
          SHA256=$(sha256sum "$UPLOAD_DIR/$new_name" | cut -d' ' -f1)
          
          # Extract control info from IPK using absolute paths
          TMP_DIR=$(mktemp -d)
          cd "$TMP_DIR"
          
          if ar -x "$IPK_FILE" control.tar.gz 2>/dev/null && tar -xzf control.tar.gz 2>/dev/null; then
            if [ -f control ]; then
              echo "Using extracted control file"
              sed 's/^Architecture:.*/Architecture: all/' control >> "$PACKAGES_FILE"
            else
              echo "No control file found, using fallback"
              printf "Package: rvi-probe\nVersion: 0.5.0-1\nArchitecture: all\nMaintainer: RVInternetHelp <support@rvinternethelp.com>\nSection: net\nPriority: optional\nDepends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util\nDescription: RVInternetHelp Network Probe\n Support/diagnostics agent with outage checks, speed tests,\n Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.\n" >> "$PACKAGES_FILE"
            fi
          else
            echo "Failed to extract control, using fallback"
            printf "Package: rvi-probe\nVersion: 0.5.0-1\nArchitecture: all\nMaintainer: RVInternetHelp <support@rvinternethelp.com>\nSection: net\nPriority: optional\nDepends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util\nDescription: RVInternetHelp Network Probe\n Support/diagnostics agent with outage checks, speed tests,\n Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.\n" >> "$PACKAGES_FILE"
          fi
          
          # Add file metadata
          printf "Filename: %s\nSize: %s\nMD5Sum: %s\nSHA256sum: %s\n\n" "$new_name" "$SIZE" "$MD5" "$SHA256" >> "$PACKAGES_FILE"
          
          # Clean up and return to original directory
          rm -rf "$TMP_DIR"
          cd "$CURRENT_DIR"
          
          # IMPORTANT: Only process the first rvi-probe package
          break
        done
        
        cd ../../upload/all
        
        # Validate the Packages file
        PKG_COUNT=$(grep -c '^Package:' Packages || echo "0")
        PKG_SIZE=$(wc -c < Packages)
        
        echo "Packages file validation:"
        echo "- Package count: $PKG_COUNT (should be 1)"
        echo "- File size: $PKG_SIZE bytes (should be 500-800)"
        
        if [ "$PKG_COUNT" != "1" ]; then
          echo "ERROR: Expected exactly 1 package, got $PKG_COUNT"
          echo "Packages file content:"
          cat Packages
          exit 1
        fi
        
        if [ "$PKG_SIZE" -gt "5000" ]; then
          echo "ERROR: Packages file too large ($PKG_SIZE bytes)"
          echo "This suggests corruption. Content:"
          head -50 Packages
          exit 1
        fi
        
        echo "Generated clean Packages file:"
        cat Packages
        
        # Create compressed version
        gzip -fk9 Packages
        
        echo "Final files:"
        ls -la

    - name: Sign packages (if enabled)
      run: |
        set -euxo pipefail
        
        # Check if upload directory exists
        if [ ! -d "upload/all" ]; then
          echo "ERROR: Upload directory not found"
          ls -la upload/ 2>/dev/null || echo "upload/ directory doesn't exist"
          ls -la . | head -10
          exit 1
        fi
        
        cd upload/all
        
        if [ "${{ vars.SIGNING_ENABLED }}" = "1" ] && [ -n "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" ]; then
          echo "Signing packages..."
          
          # Install usign
          sudo apt-get install -y libbsd-dev build-essential cmake
          curl -fsSL "https://codeload.github.com/openwrt/usign/tar.gz/master" | tar -xz -C /tmp
          cd /tmp/usign-master
          cmake . && make && sudo make install
          cd -
          
          # Decode private key and sign
          echo "${{ secrets.USIGN_PRIVATE_KEY_BASE64 }}" | base64 -d > signing.key
          
          if usign -S -m Packages -s signing.key -x Packages.sig 2>/dev/null; then
            test -s Packages.sig
            echo "✅ Packages signed successfully"
          else
            echo "⚠️  Signing failed, continuing without signature"
          fi
        else
          echo "Package signing disabled or key not provided"
        fi

    - name: Upload to Cloudflare R2
      env:
        R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
        R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
        R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
        R2_BUCKET: ${{ secrets.R2_BUCKET }}
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        # Go to upload directory
        cd upload/all
        
        echo "Files to upload:"
        ls -la
        
        # Set AWS credentials and endpoint
        export AWS_ACCESS_KEY_ID="$R2_ACCESS_KEY_ID"
        export AWS_SECRET_ACCESS_KEY="$R2_SECRET_ACCESS_KEY"
        ENDPOINT="https://$R2_ACCOUNT_ID.r2.cloudflarestorage.com"
        
        # Upload all files with proper content types (following your existing script pattern)
        aws s3 cp . "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --recursive --acl public-read --content-type text/plain || true
        
        # Re-upload specific files with correct content types
        find . -name 'Packages.gz' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/gzip --metadata-directive REPLACE \;
        find . -name 'Packages.sig' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/octet-stream --metadata-directive REPLACE \; 2>/dev/null || true
        find . -name '*.ipk' -exec aws s3 cp {} "s3://$R2_BUCKET/openwrt/23.05/all/" --endpoint-url "$ENDPOINT" --acl public-read --content-type application/octet-stream --metadata-directive REPLACE \;
        
        echo "Published to: $R2_PUBLIC_BASE/openwrt/23.05/all/"

    - name: Verify upload
      env:
        R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      run: |
        set -euxo pipefail
        
        sleep 5
        
        echo "Verifying uploaded files..."
        
        # Check if Packages file is accessible and contains our package
        if curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/Packages" | grep -q "Package: rvi-probe"; then
          echo "✅ Packages file uploaded and contains rvi-probe"
        else
          echo "❌ Packages file missing or doesn't contain rvi-probe"
          exit 1
        fi
        
        # Verify at least one IPK was uploaded
        cd upload/all
        LOCAL_IPK=$(ls *rvi-probe*_all.ipk | head -1)
        IPK_NAME=$(basename "$LOCAL_IPK")
        
        echo "Verifying IPK: $IPK_NAME"
        LOCAL_MD5=$(md5sum "$LOCAL_IPK" | cut -d' ' -f1)
        REMOTE_MD5=$(curl -fsSL "${R2_PUBLIC_BASE}/openwrt/23.05/all/$IPK_NAME" | md5sum | cut -d' ' -f1)
        
        echo "Local MD5:  $LOCAL_MD5"
        echo "Remote MD5: $REMOTE_MD5"
        
        if [ "$LOCAL_MD5" = "$REMOTE_MD5" ]; then
          echo "✅ Upload verification successful"
        else
          echo "❌ Checksum mismatch detected"
          exit 1
        fi