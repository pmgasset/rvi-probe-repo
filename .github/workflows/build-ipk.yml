name: Build rvi-probe IPK

on:
  workflow_dispatch:
  push:
    paths:
      - 'package/rvi-probe/**'
      - '.github/workflows/build-ipk.yml'

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      # ---- App config ----
      PKG_VERSION: 0.5.0-6     # <— bump when you publish
      PKG_NAME: rvi-probe

      # ---- R2 / AWS creds ----
      R2_ACCOUNT_ID: ${{ secrets.R2_ACCOUNT_ID }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_PUBLIC_BASE: ${{ secrets.R2_PUBLIC_BASE }}
      AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: auto

    steps:
      - uses: actions/checkout@v4

      - name: Install build tools (awscli, binutils, zstd)
        run: |
          set -euxo pipefail
          sudo apt-get update -y
          sudo apt-get install -y binutils zstd
          curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o awscliv2.zip
          unzip -q awscliv2.zip
          sudo ./aws/install --update

      - name: Create IPK package
        run: |
          set -euxo pipefail
          NAME="${PKG_NAME}"
          VER="${PKG_VERSION}"
          OUT="${NAME}_${VER}_all.ipk"

          # Clean build
          rm -rf build
          mkdir -p build/{CONTROL,data}

          echo "=== Copying files (exclude CONTROL from data) ==="
          # Copy top-level entries under package/rvi-probe/files (etc, usr, www, etc.)
          find package/rvi-probe/files -maxdepth 1 -mindepth 1 -not -name CONTROL -print0 | xargs -0 -I {} cp -a {} build/data/

          # Verify files copied
          FILECOUNT=$(find build/data -type f | wc -l)
          echo "Files copied: $FILECOUNT"
          if [ "$FILECOUNT" -eq 0 ]; then
            echo "ERROR: No files copied!"
            exit 1
          fi

          # Set permissions
          find build/data -path "*/bin/*" -type f -exec chmod 755 {} + || true
          find build/data -path "*/init.d/*" -type f -exec chmod 755 {} + || true
          find build/data -path "*/cgi-bin/*" -type f -exec chmod 755 {} + || true
          find build/data -name "*.sh" -type f -exec chmod 755 {} + || true

          # ----- CONTROL files -----
          # Control metadata
          cat > build/CONTROL/control <<EOC
          Package: ${NAME}
          Version: ${VER}
          Architecture: all
          Maintainer: RVInternetHelp <support@rvinternethelp.com>
          Section: net
          Priority: optional
          Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util
          Description: RVInternetHelp Network Probe
           Support/diagnostics agent with outage checks, speed tests,
           Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.
          EOC

          # Stamp postinst from template (ensures URL matches version)
          if [ -f package/rvi-probe/files/CONTROL/postinst.in ]; then
            sed "s/__VER__/${VER}/g" package/rvi-probe/files/CONTROL/postinst.in > build/CONTROL/postinst
            chmod 755 build/CONTROL/postinst
          fi

          # Copy optional maintainer scripts (preinst/prerm/postrm) if present
          for f in preinst prerm postrm; do
            if [ -f "package/rvi-probe/files/CONTROL/$f" ]; then
              install -m 755 "package/rvi-probe/files/CONTROL/$f" "build/CONTROL/$f"
            fi
          done

          cd build

          # Create IPK members
          echo "2.0" > debian-binary
          tar --owner=0 --group=0 --numeric-owner -czf control.tar.gz -C CONTROL .

          # Create data archive
          cd data
          tar --owner=0 --group=0 --numeric-owner -czf ../data.tar.gz .
          cd ..

          # Verify data archive
          DATASIZE=$(stat -c%s data.tar.gz)
          echo "Data archive size: $DATASIZE bytes"
          echo "Files in archive: $(tar -tzf data.tar.gz | wc -l)"
          if [ "$DATASIZE" -lt 50 ]; then
            echo "ERROR: data.tar.gz too small"
            exit 1
          fi

          # Create IPK
          ar -cr "${OUT}" debian-binary control.tar.gz data.tar.gz
          echo "IPK created successfully:"
          ls -la "${OUT}"

          # -------- Extra artifacts --------
          # Raw payload for direct extraction installs
          cp data.tar.gz "${NAME}_${VER}_payload.tar.gz"

          # Versioned one-shot installer (self-healing)
          cat > "install-${NAME}-${VER}.sh" <<'SH'
          #!/bin/sh
          set +e
          NAME="rvi-probe"
          VER="__VER__"
          BASE="https://r2.rvinternethelp.com/openwrt/23.05"
          IPK="${BASE}/${NAME}_${VER}_all.ipk"
          PAY="${BASE}/${NAME}_${VER}_payload.tar.gz"

          say(){ echo "[${NAME} install] $*"; }
          have(){ command -v "$1" >/dev/null 2>&1; }

          ok_files(){
            [ -f /etc/init.d/rvi-probe ] || return 1
            [ -f /usr/bin/rvi-speedtest ] || return 1
            [ -f /usr/lib/rvi-probe/agent.sh ] || return 1
            [ -f /www/cgi-bin/json ] || return 1
            return 0
          }

          write_list(){
            mkdir -p /usr/lib/opkg/info
            cat > /usr/lib/opkg/info/rvi-probe.list <<'EOF'
          /etc/init.d/rvi-probe
          /usr/bin/rvi-outage-check
          /usr/bin/rvi-sharecode
          /usr/bin/rvi-speedtest
          /usr/lib/rvi-probe/agent.sh
          /usr/lib/rvi-probe/cell.sh
          /usr/lib/lua/luci/controller/rvi.lua
          /www/cgi-bin/supportlink
          /www/cgi-bin/json
          /etc/config/rviprobe
          EOF
          }

          perms(){
            for f in \
              /etc/init.d/rvi-probe \
              /usr/bin/rvi-outage-check /usr/bin/rvi-sharecode /usr/bin/rvi-speedtest \
              /usr/lib/rvi-probe/agent.sh /usr/lib/rvi-probe/cell.sh \
              /www/cgi-bin/supportlink /www/cgi-bin/json
            do [ -f "$f" ] && chmod 0755 "$f"; done
          }

          uhttpd_cfg(){
            [ -f /etc/config/uhttpd ] || touch /etc/config/uhttpd
            if ! uci -q get uhttpd.rvi >/dev/null 2>&1; then
              uci -q batch <<'EOF'
          set uhttpd.rvi=uhttpd
          set uhttpd.rvi.listen_http='127.0.0.1:8081'
          set uhttpd.rvi.home='/www'
          add_list uhttpd.rvi.cgi_prefix='/cgi-bin'
          set uhttpd.rvi.script_timeout='60'
          set uhttpd.rvi.network_timeout='30'
          set uhttpd.rvi.tcp_keepalive='1'
          add_list uhttpd.rvi.alias='/json=/cgi-bin/json'
          commit uhttpd
          EOF
            else
              uci -q add_list uhttpd.rvi.alias='/json=/cgi-bin/json' 2>/dev/null || true
              uci -q commit uhttpd
            fi
            [ -x /etc/init.d/uhttpd ] && { /etc/init.d/uhttpd reload >/dev/null 2>&1 || /etc/init.d/uhttpd restart >/dev/null 2>&1 || true; }
          }

          cloudflared_cfg(){
            [ -x /etc/init.d/cloudflared ] || return 0
            mkdir -p /etc/cloudflared
            CFG=/etc/cloudflared/config.yml
            if [ ! -s "$CFG" ] || ! grep -q "127.0.0.1:8081" "$CFG" 2>/dev/null; then
              cat > "$CFG" <<'YAML'
          url: http://127.0.0.1:8081
          metrics: 127.0.0.1:2000
          ingress:
            - service: http://127.0.0.1:8081
            - service: http_status:404
          YAML
            fi
            /etc/init.d/cloudflared enable >/dev/null 2>&1 || true
            /etc/init.d/cloudflared restart >/dev/null 2>&1 || true
          }

          enable_start(){
            [ -x /etc/init.d/rvi-probe ] && {
              /etc/init.d/rvi-probe enable >/dev/null 2>&1 || true
              /etc/init.d/rvi-probe start  >/dev/null 2>&1 || true
            }
          }

          # 1) Try opkg install from feed
          if have opkg; then
            say "installing via opkg…"
            opkg update >/dev/null 2>&1 || true
            opkg install "${IPK}" >/dev/null 2>&1 || opkg install rvi-probe >/dev/null 2>&1
          fi

          # 2) Verify; if missing, fallback to payload tar
          if ! ok_files; then
            say "opkg didn’t lay down files; falling back to payload"
            TMP="/tmp/rvi-probe-payload.tar.gz"
            if have uclient-fetch; then
              uclient-fetch -qO "$TMP" "$PAY" || exit 1
            elif have wget; then
              wget -q -O "$TMP" "$PAY" || exit 1
            elif have curl; then
              curl -fsSL -o "$TMP" "$PAY" || exit 1
            else
              say "no downloader available"; exit 1
            fi
            tar -xzf "$TMP" -C /
          fi

          # 3) Post steps: perms, .list, config, start
          perms
          write_list
          uhttpd_cfg
          cloudflared_cfg
          enable_start

          say "install finished; checking JSON endpoint:"
          if have uclient-fetch; then
            uclient-fetch -qO- http://127.0.0.1:8081/json 2>/dev/null | head -n 3
          fi
          exit 0
          SH

          # Inject version string into installer script
          sed -i "s/__VER__/${VER}/g" "install-${NAME}-${VER}.sh"
          chmod +x "install-${NAME}-${VER}.sh"

          # Also ensure postinst template version is stamped (done above)

      - name: Verify rvi-probe IPK payload (payload gate)
        run: |
          set -euo pipefail
          cd build
          IPK="$(ls -1 ${PKG_NAME}_${PKG_VERSION}_all.ipk)"
          echo "Inspecting $IPK"
          mkdir -p /tmp/ipkcheck && cd /tmp/ipkcheck
          ar -x "$GITHUB_WORKSPACE/build/$IPK"
          COUNT=0
          if [ -f data.tar.gz ]; then
            echo "Found data.tar.gz; showing first 50 entries:"
            tar -tzf data.tar.gz | sed -n '1,50p'
            COUNT="$(tar -tzf data.tar.gz | grep -vE '^\./?$' | wc -l)"
          elif [ -f data.tar.zst ]; then
            echo "Found data.tar.zst; decompressing"
            zstd -dq data.tar.zst
            echo "Showing first 50 entries:"
            tar -tf data.tar | sed -n '1,50p'
            COUNT="$(tar -tf data.tar | grep -vE '^\./?$' | wc -l)"
          else
            echo "ERROR: No data.tar.* in IPK"
            exit 1
          fi
          echo "Payload file count: $COUNT"
          MIN_FILES=7
          if [ "$COUNT" -lt "$MIN_FILES" ]; then
            echo "ERROR: IPK payload too small (empty or directories only)"
            exit 1
          fi
          echo "Payload looks good ✅"

      - name: Create package index
        run: |
          set -euxo pipefail
          cd build
          IPK="${PKG_NAME}_${PKG_VERSION}_all.ipk"
          SIZE=$(stat -c%s "$IPK")
          MD5=$(md5sum "$IPK" | cut -d' ' -f1)
          SHA256=$(sha256sum "$IPK" | cut -d' ' -f1)
          echo "Package stats: Size=$SIZE, MD5=$MD5"
          cat > Packages <<EOF
          Package: ${PKG_NAME}
          Version: ${PKG_VERSION}
          Architecture: all
          Maintainer: RVInternetHelp <support@rvinternethelp.com>
          Section: net
          Priority: optional
          Depends: curl, ca-bundle, ca-certificates, jq, ip-full, ubus, uclient-fetch, iwinfo, wireless-tools, openssl-util
          Description: RVInternetHelp Network Probe
           Support/diagnostics agent with outage checks, speed tests,
           Cloudflare tunnel share code, JSON status, cell metrics, and CRM hooks.
          Filename: ${IPK}
          Size: $SIZE
          MD5Sum: $MD5
          SHA256sum: $SHA256
          EOF
          gzip -fk9 Packages

      - name: Upload to Cloudflare R2
        if: ${{ success() }}
        run: |
          set -euxo pipefail
          cd build
          ENDPOINT="https://${R2_ACCOUNT_ID}.r2.cloudflarestorage.com"
          echo "Uploading to Cloudflare R2..."

          # Index
          aws s3 cp Packages "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --acl public-read \
            --content-type text/plain --cache-control 'no-cache, no-store, must-revalidate' \
            --metadata-directive REPLACE
          aws s3 cp Packages.gz "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --acl public-read \
            --content-type application/gzip --cache-control 'no-cache, no-store, must-revalidate' \
            --metadata-directive REPLACE

          # IPK
          IPK="${PKG_NAME}_${PKG_VERSION}_all.ipk"
          aws s3 cp "$IPK" "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --acl public-read \
            --content-type application/octet-stream --cache-control 'no-cache, no-store, must-revalidate' \
            --metadata-directive REPLACE

          # Payload tar
          PAYLOAD="${PKG_NAME}_${PKG_VERSION}_payload.tar.gz"
          aws s3 cp "$PAYLOAD" "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --acl public-read \
            --content-type application/gzip --cache-control 'no-cache, no-store, must-revalidate' \
            --metadata-directive REPLACE

          # Installer script
          INSTALL="install-${PKG_NAME}-${PKG_VERSION}.sh"
          aws s3 cp "$INSTALL" "s3://${R2_BUCKET}/openwrt/23.05/" \
            --endpoint-url "$ENDPOINT" --acl public-read \
            --content-type text/x-shellscript --cache-control 'no-cache, no-store, must-revalidate' \
            --metadata-directive REPLACE

          echo "Upload complete!"

      - name: Verify upload
        if: ${{ success() }}
        run: |
          set -euxo pipefail
          echo "Waiting briefly for CDN propagation..."
          sleep 5
          curl -fI "${R2_PUBLIC_BASE}/openwrt/23.05/Packages"
          curl -fI "${R2_PUBLIC_BASE}/openwrt/23.05/${PKG_NAME}_${PKG_VERSION}_all.ipk"
          curl -fI "${R2_PUBLIC_BASE}/openwrt/23.05/${PKG_NAME}_${PKG_VERSION}_payload.tar.gz"
          curl -fI "${R2_PUBLIC_BASE}/openwrt/23.05/install-${PKG_NAME}-${PKG_VERSION}.sh"
          echo "Build and upload complete - version ${PKG_VERSION} ready for installation"
